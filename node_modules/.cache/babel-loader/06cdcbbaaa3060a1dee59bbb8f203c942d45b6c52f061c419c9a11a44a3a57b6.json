{"ast":null,"code":"import { applyGravity, atmosphericDrag, areCirclesClose, areCirclesColliding } from \"./physics.js\";\nimport { PLANET, SPACECRAFT, NUKES, ATMOSPHERE_LAYERS, ATMOSPHERE_OPACITY } from './constants.js';\nimport { Nuke, Asteroid } from \"./models.js\";\n// Initialize canvas\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext(\"2d\");\nfunction resizeCanvas() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\nwindow.addEventListener('resize', resizeCanvas);\nresizeCanvas();\nconst planet = {\n  x: canvas.width / 2,\n  y: canvas.height / 2,\n  radius: PLANET.RADIUS,\n  mass: PLANET.MASS,\n  atmosphere: PLANET.ATMOSPHERE\n};\n\n// Set up the spacecraft\nconst spacecraft = {\n  x: planet.x + SPACECRAFT.INITIAL_X_OFFSET,\n  y: planet.y + SPACECRAFT.INITIAL_Y_OFFSET,\n  radius: SPACECRAFT.RADIUS,\n  velocity_x: SPACECRAFT.INITIAL_VELOCITY_X,\n  velocity_y: SPACECRAFT.INITIAL_VELOCITY_Y,\n  angle: SPACECRAFT.INITIAL_ANGLE,\n  angular_velocity: SPACECRAFT.INITIAL_ANGULAR_VELOCITY\n};\nlet score = 0;\nlet gameOver = false;\nlet nukes = [];\nfunction fireNuke(spacecraft) {\n  const nuke = new Nuke(spacecraft.x, spacecraft.y, Math.sin(spacecraft.angle) * 1.5 + spacecraft.velocity_x, -Math.cos(spacecraft.angle) * 1.5 + spacecraft.velocity_y, spacecraft.angle, 0, planet);\n  console.log(nuke);\n  nukes.push(nuke);\n}\nlet asteroids = [];\nlet arrowUpPressed = false;\n\n// Add keyboard controls\ndocument.addEventListener(\"keydown\", event => {\n  switch (event.code) {\n    case \"ArrowLeft\":\n      spacecraft.angular_velocity -= 0.01; // Change angular velocity instead of angle\n      break;\n    case \"ArrowRight\":\n      spacecraft.angular_velocity += 0.01; // Change angular velocity instead of angle\n      break;\n    case \"ArrowUp\":\n      console.log(\"arrow up\");\n      arrowUpPressed = true;\n      break;\n    case \"ArrowDown\":\n      spacecraft.speed -= 0.1;\n      break;\n    case \"Space\":\n      fireNuke(spacecraft);\n      break;\n    default:\n      break;\n  }\n});\ndocument.addEventListener(\"keyup\", event => {\n  switch (event.code) {\n    case \"ArrowUp\":\n      arrowUpPressed = false;\n      break;\n    default:\n      break;\n  }\n});\n\n// Draw the planet and spacecraft\nfunction draw() {\n  // Generate a meteor shower\n  if (Math.random() <= 0.005) {\n    let xSign = 1;\n    let ySign = 1;\n    let vxSign = 1;\n    let vySign = 1;\n    if (Math.random() <= 0.5) {\n      xSign = -1;\n    }\n    if (Math.random() <= 0.5) {\n      ySign = -1;\n    }\n    if (Math.random() <= 0.5) {\n      vxSign = -1;\n    }\n    if (Math.random() <= 0.5) {\n      vySign = -1;\n    }\n\n    // const asteroid =  new Asteroid(900, 900, 0.85, -0.25, planet, 10);\n    const asteroid = new Asteroid(xSign * (window.innerWidth + (5 * Math.random() + 0.4)), ySign * (window.innerHeight + (5 * Math.random() + 0.4)), vxSign * Math.random() * 0.005, vySign * Math.random() * 0.0025, planet, Math.random() * 15 + 2);\n    asteroids.push(asteroid);\n  }\n\n  // Clear the canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.font = \"50px Arial\";\n  ctx.fillStyle = \"white\";\n  ctx.fillText(Math.round(score / 100), 10, 80);\n  for (let i = 0; i < ATMOSPHERE_LAYERS; i++) {\n    let radius = planet.radius + planet.atmosphere * (i / ATMOSPHERE_LAYERS); // Gradually increase the radius\n    let opacity_for_layer = ATMOSPHERE_OPACITY * (1 - i / ATMOSPHERE_LAYERS); // Gradually decrease the opacity\n\n    ctx.beginPath();\n    ctx.arc(planet.x, planet.y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = `rgba(135, 206, 235, ${opacity_for_layer})`; // Use the calculated opacity\n    ctx.fill();\n  }\n\n  // Draw the planet\n  ctx.beginPath();\n  ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);\n  ctx.fillStyle = \"blue\";\n  ctx.fill();\n  if (arrowUpPressed) {\n    ctx.save();\n    ctx.translate(spacecraft.x, spacecraft.y);\n    ctx.rotate(spacecraft.angle);\n    ctx.beginPath();\n    ctx.moveTo(-spacecraft.radius, spacecraft.radius + 10);\n    ctx.lineTo(0, spacecraft.radius + 30);\n    ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n    ctx.closePath();\n    ctx.fillStyle = \"orange\";\n    ctx.fill();\n    ctx.restore();\n  }\n\n  // draw spacecraft\n  ctx.save(); // Save the current state of the canvas \n  ctx.translate(spacecraft.x, spacecraft.y);\n  // Move the origin to the center of the spacecraft \n  ctx.rotate(spacecraft.angle);\n  // Rotate the canvas by the angle \n  ctx.beginPath();\n  ctx.moveTo(0, -spacecraft.radius);\n  // Move to the top vertex (relative to the origin) \n  ctx.lineTo(-spacecraft.radius, spacecraft.radius + 10);\n  // Draw a line to the bottom left vertex \n  ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n  // Draw a line to the bottom right vertex \n  ctx.closePath();\n  // Close the path \n  ctx.fillStyle = \"maroon\"; // Set fillStyle to maroon\n  // Set fillStyle to black \n  ctx.fill(); // Fill the triangle \n  ctx.restore(); // Restore the previous state of the canvas\n\n  // draw nukes\n  for (let i = 0; i < nukes.length; i++) {\n    nukes[i].draw(ctx);\n    if (nukes[i].activated) {\n      nukes[i].drawBoom(ctx);\n    }\n  }\n\n  // draw asteroids\n  for (let i = 0; i < asteroids.length; i++) {\n    asteroids[i].draw(ctx);\n  }\n}\n\n// Spacecraft outside bounds detection function\nfunction isSpacecraftOutsideBounds(spacecraft) {\n  return spacecraft.x < 0 || spacecraft.x > canvas.width || spacecraft.y < 0 || spacecraft.y > canvas.height;\n}\n\n// Update the spacecraft's position and momentum\nfunction update() {\n  score += 1;\n  console.log(\"x: \", spacecraft.velocity_x, \" y: \", spacecraft.velocity_y);\n  if (arrowUpPressed) {\n    spacecraft.velocity_x += Math.sin(spacecraft.angle) * 0.003;\n    spacecraft.velocity_y -= Math.cos(spacecraft.angle) * 0.003;\n  }\n  spacecraft.x += spacecraft.velocity_x;\n  spacecraft.y += spacecraft.velocity_y;\n  spacecraft.angle += spacecraft.angular_velocity;\n\n  // Damping\n  spacecraft.angular_velocity *= 0.995;\n\n  // Apply gravity to spacecraft\n  let newVelocities = applyGravity(planet, spacecraft.x, spacecraft.y, spacecraft.velocity_x, spacecraft.velocity_y);\n  spacecraft.velocity_x = newVelocities.velocity_x;\n  spacecraft.velocity_y = newVelocities.velocity_y;\n\n  // Apply atmospheric drag to spacecraft\n  const drag_x = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n  const drag_y = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n  spacecraft.velocity_x *= 1 - drag_x * Math.abs(spacecraft.velocity_x);\n  spacecraft.velocity_y *= 1 - drag_y * Math.abs(spacecraft.velocity_y);\n\n  // Check for spacecraft collision with planet\n  if (areCirclesColliding(planet, spacecraft) || isSpacecraftOutsideBounds(spacecraft)) {\n    spacecraft.x = planet.x;\n    spacecraft.y = planet.y + 200;\n    spacecraft.velocity_x = 1.3;\n    spacecraft.velocity_y = 0;\n    gameOver = true;\n  }\n\n  // Update nukes\n  for (let i = 0; i < nukes.length; i++) {\n    nukes[i].update();\n    if (nukes[i].fuse <= 0) {\n      nukes[i].activated = true;\n    }\n    if (areCirclesColliding(planet, nukes[i])) {\n      nukes.splice(i, 1);\n      i--;\n      continue;\n    }\n    for (let j = 0; j < asteroids.length; j++) {\n      let asteroid = asteroids[j];\n      if (areCirclesClose(nukes[i], asteroid, 30)) {\n        // Create an explosion\n        nukes[i].activated = true;\n        score += asteroid.radius * 10;\n        i--;\n        break;\n      }\n    }\n\n    // if the nuke is activated, remove asteroids within the blast radius\n    if (nukes[i] == undefined || nukes[i].activated == undefined) {\n      continue;\n    }\n    if (nukes[i].activated) {\n      for (let j = 0; j < asteroids.length; j++) {\n        let asteroid = asteroids[j];\n        if (areCirclesClose(nukes[i], asteroid, nukes[i].boom_radius)) {\n          asteroids.splice(j, 1);\n          j--;\n        }\n      }\n      if (nukes[i].boom_radius <= 0) {\n        nukes.splice(i, 1);\n        i--;\n      } else {\n        nukes[i].boom_radius--;\n      }\n    }\n  }\n\n  // Apply gravitational attraction between asteroids\n  for (let i = 0; i < asteroids.length; i++) {\n    let asteroid1 = asteroids[i];\n    for (let j = i + 1; j < asteroids.length; j++) {\n      let asteroid2 = asteroids[j];\n      let dx = asteroid2.x - asteroid1.x;\n      let dy = asteroid2.y - asteroid1.y;\n      let distance = Math.sqrt(dx * dx + dy * dy);\n\n      // Gravitational force magnitude\n      const gravitationalConstant = 0.1; // Adjust this constant as needed\n      const force = gravitationalConstant * asteroid1.mass * asteroid2.mass / (distance * distance);\n\n      // Directional force components\n      const force_x = force * dx / distance;\n      const force_y = force * dy / distance;\n\n      // Update velocities due to gravitational attraction\n      asteroid1.velocity_x += force_x / asteroid1.mass;\n      asteroid1.velocity_y += force_y / asteroid1.mass;\n      asteroid2.velocity_x -= force_x / asteroid2.mass;\n      asteroid2.velocity_y -= force_y / asteroid2.mass;\n      // Combine if collision\n      if (distance < asteroid1.radius + asteroid2.radius) {\n        // Calculate new velocities\n        let new_velocity_x = (asteroid1.velocity_x * asteroid1.mass + asteroid2.velocity_x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n        let new_velocity_y = (asteroid1.velocity_y * asteroid1.mass + asteroid2.velocity_y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n        asteroid1.x = (asteroid1.x * asteroid1.mass + asteroid2.x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n        asteroid1.y = (asteroid1.y * asteroid1.mass + asteroid2.y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n        asteroid1.velocity_x = new_velocity_x;\n        asteroid1.velocity_y = new_velocity_y;\n        asteroid1.mass += asteroid2.mass;\n        asteroids.splice(j, 1);\n      }\n    }\n    asteroid1.update();\n\n    // Apply gravity from planet\n    let asteroidVelocities = applyGravity(planet, asteroid1.x, asteroid1.y, asteroid1.velocity_x, asteroid1.velocity_y);\n    asteroid1.velocity_x = asteroidVelocities.velocity_x;\n    asteroid1.velocity_y = asteroidVelocities.velocity_y;\n\n    // Apply drag to asteroid\n    const asteroid_drag_x = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n    const asteroid_drag_y = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n    asteroid1.velocity_x *= 1 - asteroid_drag_x * Math.abs(asteroid1.velocity_x);\n    asteroid1.velocity_y *= 1 - asteroid_drag_y * Math.abs(asteroid1.velocity_y);\n\n    // Check for asteroid collision with planet\n    if (areCirclesColliding(planet, asteroid1)) {\n      asteroids.splice(i, 1);\n      i--;\n      gameOver = true;\n    }\n  }\n}\n\n// Game loop\nfunction loop() {\n  if (!gameOver) {\n    draw();\n    update();\n    requestAnimationFrame(loop);\n  } else {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = \"80px Arial\";\n    ctx.fillStyle = \"red\";\n    ctx.fillText(\"Game Over\", canvas.width / 2 - 200, canvas.height / 2);\n    ctx.font = \"50px Arial\";\n    ctx.fillText(\"Score: \" + Math.round(score / 100), canvas.width / 2 - 100, canvas.height / 2 + 60);\n  }\n}\n\n// Start the game loop\nloop();","map":{"version":3,"names":["applyGravity","atmosphericDrag","areCirclesClose","areCirclesColliding","PLANET","SPACECRAFT","NUKES","ATMOSPHERE_LAYERS","ATMOSPHERE_OPACITY","Nuke","Asteroid","canvas","document","getElementById","ctx","getContext","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","planet","x","y","radius","RADIUS","mass","MASS","atmosphere","ATMOSPHERE","spacecraft","INITIAL_X_OFFSET","INITIAL_Y_OFFSET","velocity_x","INITIAL_VELOCITY_X","velocity_y","INITIAL_VELOCITY_Y","angle","INITIAL_ANGLE","angular_velocity","INITIAL_ANGULAR_VELOCITY","score","gameOver","nukes","fireNuke","nuke","Math","sin","cos","console","log","push","asteroids","arrowUpPressed","event","code","speed","draw","random","xSign","ySign","vxSign","vySign","asteroid","clearRect","font","fillStyle","fillText","round","i","opacity_for_layer","beginPath","arc","PI","fill","save","translate","rotate","moveTo","lineTo","closePath","restore","length","activated","drawBoom","isSpacecraftOutsideBounds","update","newVelocities","drag_x","drag_y","abs","fuse","splice","j","undefined","boom_radius","asteroid1","asteroid2","dx","dy","distance","sqrt","gravitationalConstant","force","force_x","force_y","new_velocity_x","new_velocity_y","asteroidVelocities","asteroid_drag_x","asteroid_drag_y","loop","requestAnimationFrame"],"sources":["/Users/thomasrye/Documents/github/Rondaze/rondaze/src/game/game.js"],"sourcesContent":["import { applyGravity, atmosphericDrag, areCirclesClose, areCirclesColliding } from \"./physics.js\";\nimport { PLANET, SPACECRAFT, NUKES, ATMOSPHERE_LAYERS, ATMOSPHERE_OPACITY } from './constants.js';\n\nimport { Nuke, Asteroid } from \"./models.js\"\n// Initialize canvas\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext(\"2d\");\n\n\nfunction resizeCanvas() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\n\nwindow.addEventListener('resize', resizeCanvas);\nresizeCanvas();\n\nconst planet = {\n  x: canvas.width / 2,\n  y: canvas.height / 2,\n  radius: PLANET.RADIUS,\n  mass: PLANET.MASS,\n  atmosphere: PLANET.ATMOSPHERE,\n};\n\n// Set up the spacecraft\nconst spacecraft = {\n  x: planet.x + SPACECRAFT.INITIAL_X_OFFSET,\n  y: planet.y + SPACECRAFT.INITIAL_Y_OFFSET,\n  radius: SPACECRAFT.RADIUS,\n  velocity_x: SPACECRAFT.INITIAL_VELOCITY_X,\n  velocity_y: SPACECRAFT.INITIAL_VELOCITY_Y,\n  angle: SPACECRAFT.INITIAL_ANGLE,\n  angular_velocity: SPACECRAFT.INITIAL_ANGULAR_VELOCITY,\n};\n\nlet score = 0;\nlet gameOver = false;\nlet nukes = [];\n\nfunction fireNuke(spacecraft) {\n  const nuke = new Nuke(spacecraft.x, spacecraft.y, (Math.sin(spacecraft.angle) * 1.5) + spacecraft.velocity_x, (-Math.cos(spacecraft.angle) * 1.5) + spacecraft.velocity_y, spacecraft.angle, 0, planet);\n  console.log(nuke)\n  nukes.push(nuke);\n\n}\n\n\nlet asteroids = [];\n\n\nlet arrowUpPressed = false;\n\n// Add keyboard controls\ndocument.addEventListener(\"keydown\", (event) => {\n  switch (event.code) {\n    case \"ArrowLeft\":\n      spacecraft.angular_velocity -= 0.01; // Change angular velocity instead of angle\n      break;\n    case \"ArrowRight\":\n      spacecraft.angular_velocity += 0.01; // Change angular velocity instead of angle\n      break;\n    case \"ArrowUp\":\n      console.log(\"arrow up\")\n      arrowUpPressed = true;\n      break;\n    case \"ArrowDown\":\n      spacecraft.speed -= 0.1;\n      break;\n    case \"Space\":\n      fireNuke(spacecraft);\n      break;\n    default:\n      break;\n  }\n});\n\ndocument.addEventListener(\"keyup\", (event) => {\n    switch (event.code) {\n      case \"ArrowUp\":\n        arrowUpPressed = false;\n        break;\n      default:\n        break;\n    }\n  });\n\n// Draw the planet and spacecraft\nfunction draw() {\n\n\n  // Generate a meteor shower\n  if (Math.random() <= 0.005) {\n    let xSign = 1;\n    let ySign = 1;\n    let vxSign = 1;\n    let vySign = 1;\n    if (Math.random() <= 0.5) {\n      xSign = -1;\n    }\n    if (Math.random() <= 0.5) {\n      ySign = -1;\n    }\n    if (Math.random() <= 0.5) {\n      vxSign = -1;\n    }\n    if (Math.random() <= 0.5) {\n      vySign = -1;\n    }\n\n\n    // const asteroid =  new Asteroid(900, 900, 0.85, -0.25, planet, 10);\n    const asteroid = new Asteroid(\n      \n      xSign * (window.innerWidth + (5 * Math.random() + 0.4)), \n      ySign * (window.innerHeight + (5 * Math.random() + 0.4)), \n      vxSign * Math.random() * 0.005,\n      vySign * Math.random() * 0.0025,\n      planet,\n      (Math.random() * 15) + 2\n    );\n    \n    asteroids.push(asteroid);\n\n  }\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  \n    ctx.font = \"50px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(Math.round(score / 100),10,80);\n  \n    for (let i = 0; i < ATMOSPHERE_LAYERS; i++) {\n      let radius = planet.radius + planet.atmosphere * (i / ATMOSPHERE_LAYERS); // Gradually increase the radius\n      let opacity_for_layer = ATMOSPHERE_OPACITY * (1 - i / ATMOSPHERE_LAYERS); // Gradually decrease the opacity\n\n      ctx.beginPath();\n      ctx.arc(planet.x, planet.y, radius, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(135, 206, 235, ${opacity_for_layer})`; // Use the calculated opacity\n      ctx.fill();\n    }\n    \n    // Draw the planet\n    ctx.beginPath();\n    ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n\n    if (arrowUpPressed) {\n        ctx.save(); \n        ctx.translate(spacecraft.x, spacecraft.y);\n        ctx.rotate(spacecraft.angle);\n        ctx.beginPath();\n        ctx.moveTo(-spacecraft.radius, spacecraft.radius + 10);\n        ctx.lineTo(0, spacecraft.radius + 30);\n        ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n        ctx.closePath();\n        ctx.fillStyle = \"orange\";\n        ctx.fill();\n        ctx.restore();\n      }\n\n    // draw spacecraft\n    ctx.save(); // Save the current state of the canvas \n    ctx.translate(spacecraft.x, spacecraft.y); \n    // Move the origin to the center of the spacecraft \n    ctx.rotate(spacecraft.angle); \n    // Rotate the canvas by the angle \n    ctx.beginPath(); \n    ctx.moveTo(0, -spacecraft.radius); \n    // Move to the top vertex (relative to the origin) \n    ctx.lineTo(-spacecraft.radius, spacecraft.radius+10); \n    // Draw a line to the bottom left vertex \n    ctx.lineTo(spacecraft.radius, spacecraft.radius+10); \n    // Draw a line to the bottom right vertex \n    ctx.closePath(); \n    // Close the path \n    ctx.fillStyle = \"maroon\"; // Set fillStyle to maroon\n    // Set fillStyle to black \n    ctx.fill(); // Fill the triangle \n    ctx.restore(); // Restore the previous state of the canvas\n\n    // draw nukes\n    for ( let i = 0; i < nukes.length; i++) {\n      nukes[i].draw(ctx);\n      \n      if (nukes[i].activated) {\n        nukes[i].drawBoom(ctx);\n      }\n    \n    }\n\n    // draw asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n      asteroids[i].draw(ctx);\n\n    }\n    \n  }\n  \n\n// Spacecraft outside bounds detection function\nfunction isSpacecraftOutsideBounds(spacecraft) {\n    return spacecraft.x < 0 || spacecraft.x > canvas.width || spacecraft.y < 0 || spacecraft.y > canvas.height;\n}\n\n\n\n// Update the spacecraft's position and momentum\nfunction update() {\n  score += 1;\n  console.log(\"x: \", spacecraft.velocity_x, \" y: \", spacecraft.velocity_y)\n  if (arrowUpPressed) {\n    \n    spacecraft.velocity_x += Math.sin(spacecraft.angle)*0.003;\n    spacecraft.velocity_y -= Math.cos(spacecraft.angle)*0.003;\n  }\n\n  spacecraft.x += spacecraft.velocity_x;\n  spacecraft.y += spacecraft.velocity_y;  \n  spacecraft.angle += spacecraft.angular_velocity;\n\n  // Damping\n  spacecraft.angular_velocity *= 0.995;\n\n  // Apply gravity to spacecraft\n  let newVelocities = applyGravity(planet, spacecraft.x, spacecraft.y, spacecraft.velocity_x, spacecraft.velocity_y);\n  spacecraft.velocity_x = newVelocities.velocity_x;\n  spacecraft.velocity_y = newVelocities.velocity_y;\n\n  // Apply atmospheric drag to spacecraft\n  const drag_x = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n  const drag_y = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n\n  spacecraft.velocity_x *= 1 - (drag_x * Math.abs(spacecraft.velocity_x));\n  spacecraft.velocity_y *= 1 - (drag_y * Math.abs(spacecraft.velocity_y));\n\n  // Check for spacecraft collision with planet\n  if (areCirclesColliding(planet, spacecraft) || isSpacecraftOutsideBounds(spacecraft)) {\n      spacecraft.x = planet.x;\n      spacecraft.y = planet.y + 200;\n      spacecraft.velocity_x = 1.3;\n      spacecraft.velocity_y = 0;\n\n      gameOver = true;\n  }\n\n  // Update nukes\n  for (let i = 0; i < nukes.length; i++) {\n      \n\n      nukes[i].update();\n\n      if (nukes[i].fuse <= 0) {\n        nukes[i].activated = true;\n      }\n\n      if (areCirclesColliding(planet, nukes[i])) {\n          nukes.splice(i, 1);\n          i--;\n          continue;\n      }\n\n      for (let j = 0; j < asteroids.length; j++) {\n          let asteroid = asteroids[j];\n\n          if (areCirclesClose(nukes[i], asteroid, 30)) {\n              // Create an explosion\n              nukes[i].activated = true;\n              score += asteroid.radius * 10;\n              i--;\n              break;\n          }\n      }\n\n      // if the nuke is activated, remove asteroids within the blast radius\n      if (nukes[i] == undefined || nukes[i].activated == undefined) {\n        continue;\n      }\n      if (nukes[i].activated) {\n          for (let j = 0; j < asteroids.length; j++) {\n              let asteroid = asteroids[j];\n\n              if (areCirclesClose(nukes[i], asteroid, nukes[i].boom_radius)) {\n                  asteroids.splice(j, 1);\n                  j--;\n              }\n          }\n          if (nukes[i].boom_radius <= 0) {\n              nukes.splice(i, 1);\n              i--;\n          } else {\n            nukes[i].boom_radius--;\n          }\n      }\n    }\n\n  // Apply gravitational attraction between asteroids\n  for (let i = 0; i < asteroids.length; i++) {\n      let asteroid1 = asteroids[i];\n\n      for (let j = i + 1; j < asteroids.length; j++) {\n          let asteroid2 = asteroids[j];\n\n          let dx = asteroid2.x - asteroid1.x;\n          let dy = asteroid2.y - asteroid1.y;\n          let distance = Math.sqrt(dx * dx + dy * dy);\n\n          \n\n          // Gravitational force magnitude\n          const gravitationalConstant = 0.1; // Adjust this constant as needed\n          const force = (gravitationalConstant * asteroid1.mass * asteroid2.mass) / (distance * distance);\n\n          // Directional force components\n          const force_x = (force * dx) / distance;\n          const force_y = (force * dy) / distance;\n\n          // Update velocities due to gravitational attraction\n          asteroid1.velocity_x += force_x / asteroid1.mass;\n          asteroid1.velocity_y += force_y / asteroid1.mass;\n\n          asteroid2.velocity_x -= force_x / asteroid2.mass;\n          asteroid2.velocity_y -= force_y / asteroid2.mass;\n          // Combine if collision\n          if (distance < asteroid1.radius + asteroid2.radius) {\n            // Calculate new velocities\n            let new_velocity_x = (asteroid1.velocity_x * asteroid1.mass + asteroid2.velocity_x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n            let new_velocity_y = (asteroid1.velocity_y * asteroid1.mass + asteroid2.velocity_y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n\n            asteroid1.x = (asteroid1.x * asteroid1.mass + asteroid2.x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n            asteroid1.y = (asteroid1.y * asteroid1.mass + asteroid2.y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n            asteroid1.velocity_x = new_velocity_x;\n            asteroid1.velocity_y = new_velocity_y;\n\n            asteroid1.mass += asteroid2.mass\n            asteroids.splice(j, 1);\n\n        }\n      }\n\n      asteroid1.update();\n\n      // Apply gravity from planet\n      let asteroidVelocities = applyGravity(planet, asteroid1.x, asteroid1.y, asteroid1.velocity_x, asteroid1.velocity_y);\n      asteroid1.velocity_x = asteroidVelocities.velocity_x;\n      asteroid1.velocity_y = asteroidVelocities.velocity_y;\n\n      // Apply drag to asteroid\n      const asteroid_drag_x = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n      const asteroid_drag_y = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n\n      asteroid1.velocity_x *= 1 - (asteroid_drag_x * Math.abs(asteroid1.velocity_x));\n      asteroid1.velocity_y *= 1 - (asteroid_drag_y * Math.abs(asteroid1.velocity_y));\n\n      // Check for asteroid collision with planet\n      if (areCirclesColliding(planet, asteroid1)) {\n          asteroids.splice(i, 1);\n          i--;\n          gameOver = true;\n      }\n  }\n}\n  \n\n// Game loop\nfunction loop() {\n\n  if (!gameOver) {\n    draw();\n    update();\n    requestAnimationFrame(loop);\n  } else {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = \"80px Arial\";\n    ctx.fillStyle = \"red\";\n    ctx.fillText(\"Game Over\", canvas.width / 2 - 200, canvas.height / 2);\n    ctx.font = \"50px Arial\";\n    ctx.fillText(\"Score: \" + Math.round(score / 100), canvas.width / 2 - 100, canvas.height / 2 + 60);\n  }\n\n\n}\n\n// Start the game loop\nloop();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}