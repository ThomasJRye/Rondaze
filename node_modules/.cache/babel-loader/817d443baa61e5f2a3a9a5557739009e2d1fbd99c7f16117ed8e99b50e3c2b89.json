{"ast":null,"code":"import { applyGravity, atmosphericDrag, areCirclesClose, areCirclesColliding } from \"./physics.js\";\nimport { PLANET, SPACECRAFT, NUKES, ATMOSPHERE_LAYERS, ATMOSPHERE_OPACITY } from './constants.js';\nimport { Nuke, Asteroid } from \"./models.js\";\n// Initialize canvas\n\nvar score = 0;\nexport function getScore() {\n  return score;\n}\nexport function startGame(canvas, ctx) {\n  const planet = {\n    x: canvas.width / 2,\n    y: canvas.height / 2,\n    radius: PLANET.RADIUS,\n    mass: PLANET.MASS,\n    atmosphere: PLANET.ATMOSPHERE\n  };\n\n  // Set up the spacecraft\n  const spacecraft = {\n    x: planet.x + SPACECRAFT.INITIAL_X_OFFSET,\n    y: planet.y + SPACECRAFT.INITIAL_Y_OFFSET,\n    radius: SPACECRAFT.RADIUS,\n    velocity_x: SPACECRAFT.INITIAL_VELOCITY_X,\n    velocity_y: SPACECRAFT.INITIAL_VELOCITY_Y,\n    angle: SPACECRAFT.INITIAL_ANGLE,\n    angular_velocity: SPACECRAFT.INITIAL_ANGULAR_VELOCITY\n  };\n  let gameOver = false;\n  let nukes = [];\n  function fireNuke(spacecraft) {\n    const nuke = new Nuke(spacecraft.x, spacecraft.y, Math.sin(spacecraft.angle) * 1.5 + spacecraft.velocity_x, -Math.cos(spacecraft.angle) * 1.5 + spacecraft.velocity_y, spacecraft.angle, 0, planet);\n    console.log(nuke);\n    nukes.push(nuke);\n  }\n  let asteroids = [];\n  let arrowUpPressed = false;\n\n  // Add keyboard controls\n  document.addEventListener(\"keydown\", event => {\n    switch (event.code) {\n      case \"ArrowLeft\":\n        spacecraft.angular_velocity -= 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowRight\":\n        spacecraft.angular_velocity += 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowUp\":\n        console.log(\"arrow up\");\n        arrowUpPressed = true;\n        break;\n      case \"ArrowDown\":\n        spacecraft.speed -= 0.1;\n        break;\n      case \"Space\":\n        fireNuke(spacecraft);\n        break;\n      default:\n        break;\n    }\n  });\n  document.addEventListener(\"keyup\", event => {\n    switch (event.code) {\n      case \"ArrowUp\":\n        arrowUpPressed = false;\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Draw the planet and spacecraft\n  function draw() {\n    // Generate a meteor shower\n    if (Math.random() <= 0.005) {\n      let xSign = 1;\n      let ySign = 1;\n      let vxSign = 1;\n      let vySign = 1;\n      if (Math.random() <= 0.5) {\n        xSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        ySign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vxSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vySign = -1;\n      }\n\n      // const asteroid =  new Asteroid(900, 900, 0.85, -0.25, planet, 10);\n      const asteroid = new Asteroid(xSign * (window.innerWidth + (5 * Math.random() + 0.4)), ySign * (window.innerHeight + (5 * Math.random() + 0.4)), vxSign * Math.random() * 0.005, vySign * Math.random() * 0.0025, planet, Math.random() * 15 + 2);\n      asteroids.push(asteroid);\n    }\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = \"50px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(Math.round(score / 100), 10, 80);\n    for (let i = 0; i < ATMOSPHERE_LAYERS; i++) {\n      let radius = planet.radius + planet.atmosphere * (i / ATMOSPHERE_LAYERS); // Gradually increase the radius\n      let opacity_for_layer = ATMOSPHERE_OPACITY * (1 - i / ATMOSPHERE_LAYERS); // Gradually decrease the opacity\n\n      ctx.beginPath();\n      ctx.arc(planet.x, planet.y, radius, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(135, 206, 235, ${opacity_for_layer})`; // Use the calculated opacity\n      ctx.fill();\n    }\n\n    // Draw the planet\n    ctx.beginPath();\n    ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n    if (arrowUpPressed) {\n      ctx.save();\n      ctx.translate(spacecraft.x, spacecraft.y);\n      ctx.rotate(spacecraft.angle);\n      ctx.beginPath();\n      ctx.moveTo(-spacecraft.radius, spacecraft.radius + 10);\n      ctx.lineTo(0, spacecraft.radius + 30);\n      ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n      ctx.closePath();\n      ctx.fillStyle = \"orange\";\n      ctx.fill();\n      ctx.restore();\n    }\n\n    // draw spacecraft\n    ctx.save(); // Save the current state of the canvas \n    ctx.translate(spacecraft.x, spacecraft.y);\n    // Move the origin to the center of the spacecraft \n    ctx.rotate(spacecraft.angle);\n    // Rotate the canvas by the angle \n    ctx.beginPath();\n    ctx.moveTo(0, -spacecraft.radius);\n    // Move to the top vertex (relative to the origin) \n    ctx.lineTo(-spacecraft.radius, spacecraft.radius + 10);\n    // Draw a line to the bottom left vertex \n    ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n    // Draw a line to the bottom right vertex \n    ctx.closePath();\n    // Close the path \n    ctx.fillStyle = \"maroon\"; // Set fillStyle to maroon\n    // Set fillStyle to black \n    ctx.fill(); // Fill the triangle \n    ctx.restore(); // Restore the previous state of the canvas\n\n    // draw nukes\n    for (let i = 0; i < nukes.length; i++) {\n      nukes[i].draw(ctx);\n      if (nukes[i].activated) {\n        nukes[i].drawBoom(ctx);\n      }\n    }\n\n    // draw asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n      asteroids[i].draw(ctx);\n    }\n  }\n\n  // Spacecraft outside bounds detection function\n  function isSpacecraftOutsideBounds(spacecraft) {\n    return spacecraft.x < 0 || spacecraft.x > canvas.width || spacecraft.y < 0 || spacecraft.y > canvas.height;\n  }\n\n  // Update the spacecraft's position and momentum\n  function update() {\n    score += 1;\n    console.log(\"x: \", spacecraft.velocity_x, \" y: \", spacecraft.velocity_y);\n    if (arrowUpPressed) {\n      spacecraft.velocity_x += Math.sin(spacecraft.angle) * 0.003;\n      spacecraft.velocity_y -= Math.cos(spacecraft.angle) * 0.003;\n    }\n    spacecraft.x += spacecraft.velocity_x;\n    spacecraft.y += spacecraft.velocity_y;\n    spacecraft.angle += spacecraft.angular_velocity;\n\n    // Damping\n    spacecraft.angular_velocity *= 0.995;\n\n    // Apply gravity to spacecraft\n    let newVelocities = applyGravity(planet, spacecraft.x, spacecraft.y, spacecraft.velocity_x, spacecraft.velocity_y);\n    spacecraft.velocity_x = newVelocities.velocity_x;\n    spacecraft.velocity_y = newVelocities.velocity_y;\n\n    // Apply atmospheric drag to spacecraft\n    const drag_x = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n    const drag_y = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n    spacecraft.velocity_x *= 1 - drag_x * Math.abs(spacecraft.velocity_x);\n    spacecraft.velocity_y *= 1 - drag_y * Math.abs(spacecraft.velocity_y);\n\n    // Check for spacecraft collision with planet\n    if (areCirclesColliding(planet, spacecraft) || isSpacecraftOutsideBounds(spacecraft)) {\n      spacecraft.x = planet.x;\n      spacecraft.y = planet.y + 200;\n      spacecraft.velocity_x = 1.3;\n      spacecraft.velocity_y = 0;\n      gameOver = true;\n    }\n\n    // Update nukes\n    for (let i = 0; i < nukes.length; i++) {\n      nukes[i].update();\n      if (nukes[i].fuse <= 0) {\n        nukes[i].activated = true;\n      }\n      if (areCirclesColliding(planet, nukes[i])) {\n        nukes.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < asteroids.length; j++) {\n        let asteroid = asteroids[j];\n        if (areCirclesClose(nukes[i], asteroid, 30)) {\n          // Create an explosion\n          nukes[i].activated = true;\n          score += asteroid.radius * 10;\n          i--;\n          break;\n        }\n      }\n\n      // if the nuke is activated, remove asteroids within the blast radius\n      if (nukes[i] == undefined || nukes[i].activated == undefined) {\n        continue;\n      }\n      if (nukes[i].activated) {\n        for (let j = 0; j < asteroids.length; j++) {\n          let asteroid = asteroids[j];\n          if (areCirclesClose(nukes[i], asteroid, nukes[i].boom_radius)) {\n            asteroids.splice(j, 1);\n            j--;\n          }\n        }\n        if (nukes[i].boom_radius <= 0) {\n          nukes.splice(i, 1);\n          i--;\n        } else {\n          nukes[i].boom_radius--;\n        }\n      }\n    }\n\n    // Apply gravitational attraction between asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n      let asteroid1 = asteroids[i];\n      for (let j = i + 1; j < asteroids.length; j++) {\n        let asteroid2 = asteroids[j];\n        let dx = asteroid2.x - asteroid1.x;\n        let dy = asteroid2.y - asteroid1.y;\n        let distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Gravitational force magnitude\n        const gravitationalConstant = 0.1; // Adjust this constant as needed\n        const force = gravitationalConstant * asteroid1.mass * asteroid2.mass / (distance * distance);\n\n        // Directional force components\n        const force_x = force * dx / distance;\n        const force_y = force * dy / distance;\n\n        // Update velocities due to gravitational attraction\n        asteroid1.velocity_x += force_x / asteroid1.mass;\n        asteroid1.velocity_y += force_y / asteroid1.mass;\n        asteroid2.velocity_x -= force_x / asteroid2.mass;\n        asteroid2.velocity_y -= force_y / asteroid2.mass;\n        // Combine if collision\n        if (distance < asteroid1.radius + asteroid2.radius) {\n          // Calculate new velocities\n          let new_velocity_x = (asteroid1.velocity_x * asteroid1.mass + asteroid2.velocity_x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          let new_velocity_y = (asteroid1.velocity_y * asteroid1.mass + asteroid2.velocity_y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          asteroid1.x = (asteroid1.x * asteroid1.mass + asteroid2.x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          asteroid1.y = (asteroid1.y * asteroid1.mass + asteroid2.y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          asteroid1.velocity_x = new_velocity_x;\n          asteroid1.velocity_y = new_velocity_y;\n          asteroid1.mass += asteroid2.mass;\n          asteroids.splice(j, 1);\n        }\n      }\n      asteroid1.update();\n\n      // Apply gravity from planet\n      let asteroidVelocities = applyGravity(planet, asteroid1.x, asteroid1.y, asteroid1.velocity_x, asteroid1.velocity_y);\n      asteroid1.velocity_x = asteroidVelocities.velocity_x;\n      asteroid1.velocity_y = asteroidVelocities.velocity_y;\n\n      // Apply drag to asteroid\n      const asteroid_drag_x = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n      const asteroid_drag_y = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n      asteroid1.velocity_x *= 1 - asteroid_drag_x * Math.abs(asteroid1.velocity_x);\n      asteroid1.velocity_y *= 1 - asteroid_drag_y * Math.abs(asteroid1.velocity_y);\n\n      // Check for asteroid collision with planet\n      if (areCirclesColliding(planet, asteroid1)) {\n        asteroids.splice(i, 1);\n        i--;\n        gameOver = true;\n      }\n    }\n  }\n\n  // Game loop\n  function loop() {\n    if (!gameOver) {\n      draw();\n      update();\n      requestAnimationFrame(loop);\n    } else {\n      const event = new Event('gameOver');\n      window.dispatchEvent(event);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.font = \"80px Arial\";\n      ctx.fillStyle = \"red\";\n      ctx.fillText(\"Game Over\", canvas.width / 2 - 200, canvas.height / 2);\n      ctx.font = \"50px Arial\";\n      ctx.fillText(\"Score: \" + Math.round(score / 100), canvas.width / 2 - 100, canvas.height / 2 + 60);\n\n      // add restart button\n      ctx.fillStyle = \"red\";\n      ctx.fillRect(canvas.width / 2 - 100, canvas.height / 2 + 100, 200, 50);\n      ctx.fillStyle = \"white\";\n      ctx.font = \"30px Arial\";\n      ctx.fillText(\"Restart\", canvas.width / 2 - 60, canvas.height / 2 + 135);\n\n      // add event listener for restart button\n      canvas.addEventListener('click', function (event) {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        if (x >= canvas.width / 2 - 100 && x <= canvas.width / 2 + 100 && y >= canvas.height / 2 + 100 && y <= canvas.height / 2 + 150) {}\n      });\n\n      // add save high score button\n\n      ctx.fillStyle = \"red\";\n      ctx.fillRect(canvas.width / 2 - 100, canvas.height / 2 + 200, 200, 50);\n      ctx.fillStyle = \"white\";\n      ctx.font = \"30px Arial\";\n      ctx.fillText(\"Save High Score\", canvas.width / 2 - 140, canvas.height / 2 + 235);\n    }\n  }\n\n  // Start the game loop\n  loop();\n}","map":{"version":3,"names":["applyGravity","atmosphericDrag","areCirclesClose","areCirclesColliding","PLANET","SPACECRAFT","NUKES","ATMOSPHERE_LAYERS","ATMOSPHERE_OPACITY","Nuke","Asteroid","score","getScore","startGame","canvas","ctx","planet","x","width","y","height","radius","RADIUS","mass","MASS","atmosphere","ATMOSPHERE","spacecraft","INITIAL_X_OFFSET","INITIAL_Y_OFFSET","velocity_x","INITIAL_VELOCITY_X","velocity_y","INITIAL_VELOCITY_Y","angle","INITIAL_ANGLE","angular_velocity","INITIAL_ANGULAR_VELOCITY","gameOver","nukes","fireNuke","nuke","Math","sin","cos","console","log","push","asteroids","arrowUpPressed","document","addEventListener","event","code","speed","draw","random","xSign","ySign","vxSign","vySign","asteroid","window","innerWidth","innerHeight","clearRect","font","fillStyle","fillText","round","i","opacity_for_layer","beginPath","arc","PI","fill","save","translate","rotate","moveTo","lineTo","closePath","restore","length","activated","drawBoom","isSpacecraftOutsideBounds","update","newVelocities","drag_x","drag_y","abs","fuse","splice","j","undefined","boom_radius","asteroid1","asteroid2","dx","dy","distance","sqrt","gravitationalConstant","force","force_x","force_y","new_velocity_x","new_velocity_y","asteroidVelocities","asteroid_drag_x","asteroid_drag_y","loop","requestAnimationFrame","Event","dispatchEvent","fillRect","rect","getBoundingClientRect","clientX","left","clientY","top"],"sources":["/Users/thomasrye/Documents/github/Rondaze/rondaze/src/game/game.js"],"sourcesContent":["import { applyGravity, atmosphericDrag, areCirclesClose, areCirclesColliding } from \"./physics.js\";\nimport { PLANET, SPACECRAFT, NUKES, ATMOSPHERE_LAYERS, ATMOSPHERE_OPACITY } from './constants.js';\n\nimport { Nuke, Asteroid } from \"./models.js\"\n// Initialize canvas\n\nvar score = 0;\n\nexport function getScore() {\n  return score;\n}\n\nexport function startGame(canvas, ctx) {\n\n  const planet = {\n    x: canvas.width / 2,\n    y: canvas.height / 2,\n    radius: PLANET.RADIUS,\n    mass: PLANET.MASS,\n    atmosphere: PLANET.ATMOSPHERE,\n  };\n\n  // Set up the spacecraft\n  const spacecraft = {\n    x: planet.x + SPACECRAFT.INITIAL_X_OFFSET,\n    y: planet.y + SPACECRAFT.INITIAL_Y_OFFSET,\n    radius: SPACECRAFT.RADIUS,\n    velocity_x: SPACECRAFT.INITIAL_VELOCITY_X,\n    velocity_y: SPACECRAFT.INITIAL_VELOCITY_Y,\n    angle: SPACECRAFT.INITIAL_ANGLE,\n    angular_velocity: SPACECRAFT.INITIAL_ANGULAR_VELOCITY,\n  };\n\n  let gameOver = false;\n  let nukes = [];\n\n  function fireNuke(spacecraft) {\n    const nuke = new Nuke(spacecraft.x, spacecraft.y, (Math.sin(spacecraft.angle) * 1.5) + spacecraft.velocity_x, (-Math.cos(spacecraft.angle) * 1.5) + spacecraft.velocity_y, spacecraft.angle, 0, planet);\n    console.log(nuke)\n    nukes.push(nuke);\n\n  }\n\n\n  let asteroids = [];\n\n\n  let arrowUpPressed = false;\n\n  // Add keyboard controls\n  document.addEventListener(\"keydown\", (event) => {\n    switch (event.code) {\n      case \"ArrowLeft\":\n        spacecraft.angular_velocity -= 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowRight\":\n        spacecraft.angular_velocity += 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowUp\":\n        console.log(\"arrow up\")\n        arrowUpPressed = true;\n        break;\n      case \"ArrowDown\":\n        spacecraft.speed -= 0.1;\n        break;\n      case \"Space\":\n        fireNuke(spacecraft);\n        break;\n      default:\n        break;\n    }\n  });\n\n  document.addEventListener(\"keyup\", (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          arrowUpPressed = false;\n          break;\n        default:\n          break;\n      }\n    });\n\n  // Draw the planet and spacecraft\n  function draw() {\n\n\n    // Generate a meteor shower\n    if (Math.random() <= 0.005) {\n      let xSign = 1;\n      let ySign = 1;\n      let vxSign = 1;\n      let vySign = 1;\n      if (Math.random() <= 0.5) {\n        xSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        ySign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vxSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vySign = -1;\n      }\n\n\n      // const asteroid =  new Asteroid(900, 900, 0.85, -0.25, planet, 10);\n      const asteroid = new Asteroid(\n        \n        xSign * (window.innerWidth + (5 * Math.random() + 0.4)), \n        ySign * (window.innerHeight + (5 * Math.random() + 0.4)), \n        vxSign * Math.random() * 0.005,\n        vySign * Math.random() * 0.0025,\n        planet,\n        (Math.random() * 15) + 2\n      );\n      \n      asteroids.push(asteroid);\n\n    }\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n      ctx.font = \"50px Arial\";\n      ctx.fillStyle = \"white\";\n      ctx.fillText(Math.round(score / 100),10,80);\n    \n      for (let i = 0; i < ATMOSPHERE_LAYERS; i++) {\n        let radius = planet.radius + planet.atmosphere * (i / ATMOSPHERE_LAYERS); // Gradually increase the radius\n        let opacity_for_layer = ATMOSPHERE_OPACITY * (1 - i / ATMOSPHERE_LAYERS); // Gradually decrease the opacity\n\n        ctx.beginPath();\n        ctx.arc(planet.x, planet.y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(135, 206, 235, ${opacity_for_layer})`; // Use the calculated opacity\n        ctx.fill();\n      }\n      \n      // Draw the planet\n      ctx.beginPath();\n      ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);\n      ctx.fillStyle = \"blue\";\n      ctx.fill();\n\n      if (arrowUpPressed) {\n          ctx.save(); \n          ctx.translate(spacecraft.x, spacecraft.y);\n          ctx.rotate(spacecraft.angle);\n          ctx.beginPath();\n          ctx.moveTo(-spacecraft.radius, spacecraft.radius + 10);\n          ctx.lineTo(0, spacecraft.radius + 30);\n          ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n          ctx.closePath();\n          ctx.fillStyle = \"orange\";\n          ctx.fill();\n          ctx.restore();\n        }\n\n      // draw spacecraft\n      ctx.save(); // Save the current state of the canvas \n      ctx.translate(spacecraft.x, spacecraft.y); \n      // Move the origin to the center of the spacecraft \n      ctx.rotate(spacecraft.angle); \n      // Rotate the canvas by the angle \n      ctx.beginPath(); \n      ctx.moveTo(0, -spacecraft.radius); \n      // Move to the top vertex (relative to the origin) \n      ctx.lineTo(-spacecraft.radius, spacecraft.radius+10); \n      // Draw a line to the bottom left vertex \n      ctx.lineTo(spacecraft.radius, spacecraft.radius+10); \n      // Draw a line to the bottom right vertex \n      ctx.closePath(); \n      // Close the path \n      ctx.fillStyle = \"maroon\"; // Set fillStyle to maroon\n      // Set fillStyle to black \n      ctx.fill(); // Fill the triangle \n      ctx.restore(); // Restore the previous state of the canvas\n\n      // draw nukes\n      for ( let i = 0; i < nukes.length; i++) {\n        nukes[i].draw(ctx);\n        \n        if (nukes[i].activated) {\n          nukes[i].drawBoom(ctx);\n        }\n      \n      }\n\n      // draw asteroids\n      for (let i = 0; i < asteroids.length; i++) {\n        asteroids[i].draw(ctx);\n\n      }\n      \n    }\n    \n\n  // Spacecraft outside bounds detection function\n  function isSpacecraftOutsideBounds(spacecraft) {\n      return spacecraft.x < 0 || spacecraft.x > canvas.width || spacecraft.y < 0 || spacecraft.y > canvas.height;\n  }\n\n\n\n  // Update the spacecraft's position and momentum\n  function update() {\n    score += 1;\n    console.log(\"x: \", spacecraft.velocity_x, \" y: \", spacecraft.velocity_y)\n    if (arrowUpPressed) {\n      \n      spacecraft.velocity_x += Math.sin(spacecraft.angle)*0.003;\n      spacecraft.velocity_y -= Math.cos(spacecraft.angle)*0.003;\n    }\n\n    spacecraft.x += spacecraft.velocity_x;\n    spacecraft.y += spacecraft.velocity_y;  \n    spacecraft.angle += spacecraft.angular_velocity;\n\n    // Damping\n    spacecraft.angular_velocity *= 0.995;\n\n    // Apply gravity to spacecraft\n    let newVelocities = applyGravity(planet, spacecraft.x, spacecraft.y, spacecraft.velocity_x, spacecraft.velocity_y);\n    spacecraft.velocity_x = newVelocities.velocity_x;\n    spacecraft.velocity_y = newVelocities.velocity_y;\n\n    // Apply atmospheric drag to spacecraft\n    const drag_x = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n    const drag_y = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n\n    spacecraft.velocity_x *= 1 - (drag_x * Math.abs(spacecraft.velocity_x));\n    spacecraft.velocity_y *= 1 - (drag_y * Math.abs(spacecraft.velocity_y));\n\n    // Check for spacecraft collision with planet\n    if (areCirclesColliding(planet, spacecraft) || isSpacecraftOutsideBounds(spacecraft)) {\n        spacecraft.x = planet.x;\n        spacecraft.y = planet.y + 200;\n        spacecraft.velocity_x = 1.3;\n        spacecraft.velocity_y = 0;\n\n        gameOver = true;\n    }\n\n    // Update nukes\n    for (let i = 0; i < nukes.length; i++) {\n        \n\n        nukes[i].update();\n\n        if (nukes[i].fuse <= 0) {\n          nukes[i].activated = true;\n        }\n\n        if (areCirclesColliding(planet, nukes[i])) {\n            nukes.splice(i, 1);\n            i--;\n            continue;\n        }\n\n        for (let j = 0; j < asteroids.length; j++) {\n            let asteroid = asteroids[j];\n\n            if (areCirclesClose(nukes[i], asteroid, 30)) {\n                // Create an explosion\n                nukes[i].activated = true;\n                score += asteroid.radius * 10;\n                i--;\n                break;\n            }\n        }\n\n        // if the nuke is activated, remove asteroids within the blast radius\n        if (nukes[i] == undefined || nukes[i].activated == undefined) {\n          continue;\n        }\n        if (nukes[i].activated) {\n            for (let j = 0; j < asteroids.length; j++) {\n                let asteroid = asteroids[j];\n\n                if (areCirclesClose(nukes[i], asteroid, nukes[i].boom_radius)) {\n                    asteroids.splice(j, 1);\n                    j--;\n                }\n            }\n            if (nukes[i].boom_radius <= 0) {\n                nukes.splice(i, 1);\n                i--;\n            } else {\n              nukes[i].boom_radius--;\n            }\n        }\n      }\n\n    // Apply gravitational attraction between asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n        let asteroid1 = asteroids[i];\n\n        for (let j = i + 1; j < asteroids.length; j++) {\n            let asteroid2 = asteroids[j];\n\n            let dx = asteroid2.x - asteroid1.x;\n            let dy = asteroid2.y - asteroid1.y;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n\n            \n\n            // Gravitational force magnitude\n            const gravitationalConstant = 0.1; // Adjust this constant as needed\n            const force = (gravitationalConstant * asteroid1.mass * asteroid2.mass) / (distance * distance);\n\n            // Directional force components\n            const force_x = (force * dx) / distance;\n            const force_y = (force * dy) / distance;\n\n            // Update velocities due to gravitational attraction\n            asteroid1.velocity_x += force_x / asteroid1.mass;\n            asteroid1.velocity_y += force_y / asteroid1.mass;\n\n            asteroid2.velocity_x -= force_x / asteroid2.mass;\n            asteroid2.velocity_y -= force_y / asteroid2.mass;\n            // Combine if collision\n            if (distance < asteroid1.radius + asteroid2.radius) {\n              // Calculate new velocities\n              let new_velocity_x = (asteroid1.velocity_x * asteroid1.mass + asteroid2.velocity_x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n              let new_velocity_y = (asteroid1.velocity_y * asteroid1.mass + asteroid2.velocity_y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n\n              asteroid1.x = (asteroid1.x * asteroid1.mass + asteroid2.x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n              asteroid1.y = (asteroid1.y * asteroid1.mass + asteroid2.y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n              asteroid1.velocity_x = new_velocity_x;\n              asteroid1.velocity_y = new_velocity_y;\n\n              asteroid1.mass += asteroid2.mass\n              asteroids.splice(j, 1);\n\n          }\n        }\n\n        asteroid1.update();\n\n        // Apply gravity from planet\n        let asteroidVelocities = applyGravity(planet, asteroid1.x, asteroid1.y, asteroid1.velocity_x, asteroid1.velocity_y);\n        asteroid1.velocity_x = asteroidVelocities.velocity_x;\n        asteroid1.velocity_y = asteroidVelocities.velocity_y;\n\n        // Apply drag to asteroid\n        const asteroid_drag_x = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n        const asteroid_drag_y = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n\n        asteroid1.velocity_x *= 1 - (asteroid_drag_x * Math.abs(asteroid1.velocity_x));\n        asteroid1.velocity_y *= 1 - (asteroid_drag_y * Math.abs(asteroid1.velocity_y));\n\n        // Check for asteroid collision with planet\n        if (areCirclesColliding(planet, asteroid1)) {\n            asteroids.splice(i, 1);\n            i--;\n            gameOver = true;\n        }\n    }\n  }\n    \n\n  // Game loop\n  function loop() {\n\n    if (!gameOver) {\n      \n      draw();\n      update();\n      requestAnimationFrame(loop);\n    } else {\n      const event = new Event('gameOver');\n      window.dispatchEvent(event);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.font = \"80px Arial\";\n      ctx.fillStyle = \"red\";\n      ctx.fillText(\"Game Over\", canvas.width / 2 - 200, canvas.height / 2);\n      ctx.font = \"50px Arial\";\n      ctx.fillText(\"Score: \" + Math.round(score / 100), canvas.width / 2 - 100, canvas.height / 2 + 60);\n\n      // add restart button\n      ctx.fillStyle = \"red\";\n     \n      ctx.fillRect(canvas.width / 2 - 100, canvas.height / 2 + 100, 200, 50);\n      ctx.fillStyle = \"white\";\n      ctx.font = \"30px Arial\";\n      ctx.fillText(\"Restart\", canvas.width / 2 - 60, canvas.height / 2 + 135);\n\n      \n      // add event listener for restart button\n    canvas.addEventListener('click', function(event) {\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      if (x >= canvas.width / 2 - 100 && x <= canvas.width / 2 + 100 &&\n          y >= canvas.height / 2 + 100 && y <= canvas.height / 2 + 150) {\n      }\n    }\n  );\n\n    // add save high score button\n\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(canvas.width / 2 - 100, canvas.height / 2 + 200, 200, 50);\n    ctx.fillStyle = \"white\";\n    ctx.font = \"30px Arial\";\n    ctx.fillText(\"Save High Score\", canvas.width / 2 - 140, canvas.height / 2 + 235);\n\n\n\n    }\n  }\n\n\n  // Start the game loop\n  loop();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}