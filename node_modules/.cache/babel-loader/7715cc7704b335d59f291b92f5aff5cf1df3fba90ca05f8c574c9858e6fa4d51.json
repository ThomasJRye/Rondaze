{"ast":null,"code":"import { GRAVITY_CONSTANT, DAMPING_FACTOR } from \"./constants.js\";\nexport function acceleration(radius, planet_mass) {\n  const gravity = 35; // Gravitational constant\n  if (radius < 0) {\n    return -gravity * (planet_mass / (radius * radius));\n  } else {\n    return gravity * (planet_mass / (radius * radius));\n  }\n}\nexport function applyGravity(planet, x, y, velocity_x, velocity_y) {\n  const dx = planet.x - x;\n  const dy = planet.y - y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n\n  // Calculate gravitational force\n  const force = GRAVITY_CONSTANT * planet.mass / (distance * distance);\n  const force_x = force * dx / distance;\n  const force_y = force * dy / distance;\n  return {\n    velocity_x: velocity_x + force_x,\n    velocity_y: velocity_y + force_y\n  };\n}\n// Example of using damping factor elsewhere\nexport function applyDamping(angular_velocity) {\n  return angular_velocity * DAMPING_FACTOR;\n}\n\n// Collision detection function\nexport function areCirclesColliding(circle1, circle2) {\n  const dx = circle1.x - circle2.x;\n  const dy = circle1.y - circle2.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const sumOfRadii = circle1.radius + circle2.radius;\n  return distance <= sumOfRadii;\n}\n\n// Checks if circles are within allowed distance\nexport function areCirclesClose(circle1, circle2, allowedDistance) {\n  const dx = circle1.x - circle2.x;\n  const dy = circle1.y - circle2.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance <= allowedDistance;\n}\nfunction inAtmosphere(distance, planet) {\n  return distance < planet.radius + planet.atmosphere;\n}\nexport function atmosphericDrag(x, y, planet) {\n  const dx = x - planet.x;\n  const dy = y - planet.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  if (inAtmosphere(distance, planet)) {\n    //calculate atmispheric density\n    const atmosphereDensity = 1 - (distance - planet.radius) / planet.atmosphere;\n    const dragfactor = atmosphereDensity * 0.0002;\n    return dragfactor;\n  } else {\n    return 0;\n  }\n}","map":{"version":3,"names":["GRAVITY_CONSTANT","DAMPING_FACTOR","acceleration","radius","planet_mass","gravity","applyGravity","planet","x","y","velocity_x","velocity_y","dx","dy","distance","Math","sqrt","force","mass","force_x","force_y","applyDamping","angular_velocity","areCirclesColliding","circle1","circle2","sumOfRadii","areCirclesClose","allowedDistance","inAtmosphere","atmosphere","atmosphericDrag","atmosphereDensity","dragfactor"],"sources":["/Users/thomasrye/Documents/github/Rondaze/rondaze/src/game/physics.js"],"sourcesContent":["import { GRAVITY_CONSTANT, DAMPING_FACTOR } from \"./constants.js\";\n\nexport function acceleration(radius, planet_mass) {\n  const gravity = 35; // Gravitational constant\n  if (radius < 0) {\n    return -gravity * (planet_mass / (radius * radius));\n  } else {\n    return gravity * (planet_mass / (radius * radius));\n  }\n}\n\nexport function applyGravity(planet, x, y, velocity_x, velocity_y) {\n  const dx = planet.x - x;\n  const dy = planet.y - y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n\n  // Calculate gravitational force\n  const force = (GRAVITY_CONSTANT * planet.mass) / (distance * distance);\n  const force_x = (force * dx) / distance;\n  const force_y = (force * dy) / distance;\n\n  return {\n    velocity_x: velocity_x + force_x,\n    velocity_y: velocity_y + force_y,\n  };\n}\n// Example of using damping factor elsewhere\nexport function applyDamping(angular_velocity) {\n  return angular_velocity * DAMPING_FACTOR;\n}\n\n// Collision detection function\nexport function areCirclesColliding(circle1, circle2) {\n  const dx = circle1.x - circle2.x;\n  const dy = circle1.y - circle2.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const sumOfRadii = circle1.radius + circle2.radius;\n\n  return distance <= sumOfRadii;\n}\n\n// Checks if circles are within allowed distance\nexport function areCirclesClose(circle1, circle2, allowedDistance) {\n  const dx = circle1.x - circle2.x;\n  const dy = circle1.y - circle2.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n\n  return distance <= allowedDistance;\n}\n\nfunction inAtmosphere(distance, planet) {\n  return distance < planet.radius + planet.atmosphere;\n}\n\nexport function atmosphericDrag(x, y, planet) {\n  const dx = x - planet.x;\n  const dy = y - planet.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n\n  if (inAtmosphere(distance, planet)) {\n    //calculate atmispheric density\n    const atmosphereDensity =\n      1 - (distance - planet.radius) / planet.atmosphere;\n\n    const dragfactor = atmosphereDensity * 0.0002;\n\n    return dragfactor;\n  } else {\n    return 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}