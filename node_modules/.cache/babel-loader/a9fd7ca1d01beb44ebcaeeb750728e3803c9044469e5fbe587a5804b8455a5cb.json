{"ast":null,"code":"import { applyGravity, atmosphericDrag, areCirclesClose, areCirclesColliding } from \"./physics.js\";\nimport { PLANET, SPACECRAFT, NUKES, ATMOSPHERE_LAYERS, ATMOSPHERE_OPACITY } from './constants.js';\nimport { Nuke, Asteroid } from \"./models.js\";\n// Initialize canvas\n\nexport function startGame(canvas, ctx) {\n  let planet, spacecraft, score, gameOver, nukes, asteroids, arrowUpPressed;\n  function initializeGame() {\n    planet = {\n      x: canvas.width / 2,\n      y: canvas.height / 2,\n      radius: PLANET.RADIUS,\n      mass: PLANET.MASS,\n      atmosphere: PLANET.ATMOSPHERE\n    };\n    spacecraft = {\n      x: planet.x + SPACECRAFT.INITIAL_X_OFFSET,\n      y: planet.y + SPACECRAFT.INITIAL_Y_OFFSET,\n      radius: SPACECRAFT.RADIUS,\n      velocity_x: SPACECRAFT.INITIAL_VELOCITY_X,\n      velocity_y: SPACECRAFT.INITIAL_VELOCITY_Y,\n      angle: SPACECRAFT.INITIAL_ANGLE,\n      angular_velocity: SPACECRAFT.INITIAL_ANGULAR_VELOCITY\n    };\n    score = 0;\n    gameOver = false;\n    nukes = [];\n    asteroids = [];\n    arrowUpPressed = false;\n  }\n  initializeGame();\n  function fireNuke(spacecraft) {\n    const nuke = new Nuke(spacecraft.x, spacecraft.y, Math.sin(spacecraft.angle) * 1.5 + spacecraft.velocity_x, -Math.cos(spacecraft.angle) * 1.5 + spacecraft.velocity_y, spacecraft.angle, 0, planet);\n    console.log(nuke);\n    nukes.push(nuke);\n  }\n\n  // Add keyboard controls\n  document.addEventListener(\"keydown\", event => {\n    switch (event.code) {\n      case \"ArrowLeft\":\n        spacecraft.angular_velocity -= 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowRight\":\n        spacecraft.angular_velocity += 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowUp\":\n        console.log(\"arrow up\");\n        arrowUpPressed = true;\n        break;\n      case \"ArrowDown\":\n        spacecraft.speed -= 0.1;\n        break;\n      case \"Space\":\n        fireNuke(spacecraft);\n        break;\n      default:\n        break;\n    }\n  });\n  document.addEventListener(\"keyup\", event => {\n    switch (event.code) {\n      case \"ArrowUp\":\n        arrowUpPressed = false;\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Draw the planet and spacecraft\n  function draw() {\n    // Generate a meteor shower\n    if (Math.random() <= 0.005) {\n      let xSign = 1;\n      let ySign = 1;\n      let vxSign = 1;\n      let vySign = 1;\n      if (Math.random() <= 0.5) {\n        xSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        ySign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vxSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vySign = -1;\n      }\n      const asteroid = new Asteroid(xSign * (window.innerWidth + (5 * Math.random() + 0.4)), ySign * (window.innerHeight + (5 * Math.random() + 0.4)), vxSign * Math.random() * 0.005, vySign * Math.random() * 0.0025, planet, Math.random() * 15 + 2);\n      asteroids.push(asteroid);\n    }\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = \"50px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(Math.round(score / 100), 10, 80);\n    for (let i = 0; i < ATMOSPHERE_LAYERS; i++) {\n      let radius = planet.radius + planet.atmosphere * (i / ATMOSPHERE_LAYERS); // Gradually increase the radius\n      let opacity_for_layer = ATMOSPHERE_OPACITY * (1 - i / ATMOSPHERE_LAYERS); // Gradually decrease the opacity\n\n      ctx.beginPath();\n      ctx.arc(planet.x, planet.y, radius, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(135, 206, 235, ${opacity_for_layer})`; // Use the calculated opacity\n      ctx.fill();\n    }\n\n    // Draw the planet\n    ctx.beginPath();\n    ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n    if (arrowUpPressed) {\n      ctx.save();\n      ctx.translate(spacecraft.x, spacecraft.y);\n      ctx.rotate(spacecraft.angle);\n      ctx.beginPath();\n      ctx.moveTo(-spacecraft.radius, spacecraft.radius + 10);\n      ctx.lineTo(0, spacecraft.radius + 30);\n      ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n      ctx.closePath();\n      ctx.fillStyle = \"orange\";\n      ctx.fill();\n      ctx.restore();\n    }\n\n    // draw spacecraft\n    ctx.save(); // Save the current state of the canvas \n    ctx.translate(spacecraft.x, spacecraft.y);\n    // Move the origin to the center of the spacecraft \n    ctx.rotate(spacecraft.angle);\n    // Rotate the canvas by the angle \n    ctx.beginPath();\n    ctx.moveTo(0, -spacecraft.radius);\n    // Move to the top vertex (relative to the origin) \n    ctx.lineTo(-spacecraft.radius, spacecraft.radius + 10);\n    // Draw a line to the bottom left vertex \n    ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n    // Draw a line to the bottom right vertex \n    ctx.closePath();\n    // Close the path \n    ctx.fillStyle = \"maroon\"; // Set fillStyle to maroon\n    // Set fillStyle to black \n    ctx.fill(); // Fill the triangle \n    ctx.restore(); // Restore the previous state of the canvas\n\n    // draw nukes\n    for (let i = 0; i < nukes.length; i++) {\n      nukes[i].draw(ctx);\n      if (nukes[i].activated) {\n        nukes[i].drawBoom(ctx);\n      }\n    }\n\n    // draw asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n      asteroids[i].draw(ctx);\n    }\n  }\n\n  // Spacecraft outside bounds detection function\n  function isSpacecraftOutsideBounds(spacecraft) {\n    return spacecraft.x < 0 || spacecraft.x > canvas.width || spacecraft.y < 0 || spacecraft.y > canvas.height;\n  }\n\n  // Update the spacecraft's position and momentum\n  function update() {\n    score += 1;\n    console.log(\"x: \", spacecraft.velocity_x, \" y: \", spacecraft.velocity_y);\n    if (arrowUpPressed) {\n      spacecraft.velocity_x += Math.sin(spacecraft.angle) * 0.003;\n      spacecraft.velocity_y -= Math.cos(spacecraft.angle) * 0.003;\n    }\n    spacecraft.x += spacecraft.velocity_x;\n    spacecraft.y += spacecraft.velocity_y;\n    spacecraft.angle += spacecraft.angular_velocity;\n\n    // Damping\n    spacecraft.angular_velocity *= 0.995;\n\n    // Apply gravity to spacecraft\n    let newVelocities = applyGravity(planet, spacecraft.x, spacecraft.y, spacecraft.velocity_x, spacecraft.velocity_y);\n    spacecraft.velocity_x = newVelocities.velocity_x;\n    spacecraft.velocity_y = newVelocities.velocity_y;\n\n    // Apply atmospheric drag to spacecraft\n    const drag_x = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n    const drag_y = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n    spacecraft.velocity_x *= 1 - drag_x * Math.abs(spacecraft.velocity_x);\n    spacecraft.velocity_y *= 1 - drag_y * Math.abs(spacecraft.velocity_y);\n\n    // Check for spacecraft collision with planet\n    if (areCirclesColliding(planet, spacecraft) || isSpacecraftOutsideBounds(spacecraft)) {\n      spacecraft.x = planet.x;\n      spacecraft.y = planet.y + 200;\n      spacecraft.velocity_x = 1.3;\n      spacecraft.velocity_y = 0;\n      gameOver = true;\n    }\n\n    // Update nukes\n    for (let i = 0; i < nukes.length; i++) {\n      nukes[i].update();\n      if (nukes[i].fuse <= 0) {\n        nukes[i].activated = true;\n      }\n      if (areCirclesColliding(planet, nukes[i])) {\n        nukes.splice(i, 1);\n        i--;\n        continue;\n      }\n      for (let j = 0; j < asteroids.length; j++) {\n        let asteroid = asteroids[j];\n        if (areCirclesClose(nukes[i], asteroid, 30)) {\n          // Create an explosion\n          nukes[i].activated = true;\n          score += asteroid.radius * 10;\n          i--;\n          break;\n        }\n      }\n\n      // if the nuke is activated, remove asteroids within the blast radius\n      if (nukes[i] == undefined || nukes[i].activated == undefined) {\n        continue;\n      }\n      if (nukes[i].activated) {\n        for (let j = 0; j < asteroids.length; j++) {\n          let asteroid = asteroids[j];\n          if (areCirclesClose(nukes[i], asteroid, nukes[i].boom_radius)) {\n            asteroids.splice(j, 1);\n            j--;\n          }\n        }\n        if (nukes[i].boom_radius <= 0) {\n          nukes.splice(i, 1);\n          i--;\n        } else {\n          nukes[i].boom_radius--;\n        }\n      }\n    }\n\n    // Apply gravitational attraction between asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n      let asteroid1 = asteroids[i];\n      for (let j = i + 1; j < asteroids.length; j++) {\n        let asteroid2 = asteroids[j];\n        let dx = asteroid2.x - asteroid1.x;\n        let dy = asteroid2.y - asteroid1.y;\n        let distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Gravitational force magnitude\n        const gravitationalConstant = 0.1; // Adjust this constant as needed\n        const force = gravitationalConstant * asteroid1.mass * asteroid2.mass / (distance * distance);\n\n        // Directional force components\n        const force_x = force * dx / distance;\n        const force_y = force * dy / distance;\n\n        // Update velocities due to gravitational attraction\n        asteroid1.velocity_x += force_x / asteroid1.mass;\n        asteroid1.velocity_y += force_y / asteroid1.mass;\n        asteroid2.velocity_x -= force_x / asteroid2.mass;\n        asteroid2.velocity_y -= force_y / asteroid2.mass;\n        // Combine if collision\n        if (distance < asteroid1.radius + asteroid2.radius) {\n          // Calculate new velocities\n          let new_velocity_x = (asteroid1.velocity_x * asteroid1.mass + asteroid2.velocity_x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          let new_velocity_y = (asteroid1.velocity_y * asteroid1.mass + asteroid2.velocity_y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          asteroid1.x = (asteroid1.x * asteroid1.mass + asteroid2.x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          asteroid1.y = (asteroid1.y * asteroid1.mass + asteroid2.y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n          asteroid1.velocity_x = new_velocity_x;\n          asteroid1.velocity_y = new_velocity_y;\n          asteroid1.mass += asteroid2.mass;\n          asteroids.splice(j, 1);\n        }\n      }\n      asteroid1.update();\n\n      // Apply gravity from planet\n      let asteroidVelocities = applyGravity(planet, asteroid1.x, asteroid1.y, asteroid1.velocity_x, asteroid1.velocity_y);\n      asteroid1.velocity_x = asteroidVelocities.velocity_x;\n      asteroid1.velocity_y = asteroidVelocities.velocity_y;\n\n      // Apply drag to asteroid\n      const asteroid_drag_x = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n      const asteroid_drag_y = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n      asteroid1.velocity_x *= 1 - asteroid_drag_x * Math.abs(asteroid1.velocity_x);\n      asteroid1.velocity_y *= 1 - asteroid_drag_y * Math.abs(asteroid1.velocity_y);\n\n      // Check for asteroid collision with planet\n      if (areCirclesColliding(planet, asteroid1)) {\n        asteroids.splice(i, 1);\n        i--;\n        gameOver = true;\n      }\n    }\n  }\n  function restartGame() {\n    canvas.removeEventListener('click', restartGame);\n    initializeGame();\n    loop();\n  }\n\n  // Game loop\n  function loop() {\n    if (!gameOver) {\n      draw();\n      update();\n      requestAnimationFrame(loop);\n    } else {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.font = \"80px Arial\";\n      ctx.fillStyle = \"red\";\n      ctx.fillText(\"Game Over\", canvas.width / 2 - 200, canvas.height / 2);\n      ctx.font = \"50px Arial\";\n      ctx.fillText(\"Click to Restart\", canvas.width / 2 - 150, canvas.height / 2 + 60);\n\n      // Add event listener for click to restart\n      canvas.addEventListener('click', restartGame);\n    }\n  }\n\n  // Start the game loop\n  loop();\n}","map":{"version":3,"names":["applyGravity","atmosphericDrag","areCirclesClose","areCirclesColliding","PLANET","SPACECRAFT","NUKES","ATMOSPHERE_LAYERS","ATMOSPHERE_OPACITY","Nuke","Asteroid","startGame","canvas","ctx","planet","spacecraft","score","gameOver","nukes","asteroids","arrowUpPressed","initializeGame","x","width","y","height","radius","RADIUS","mass","MASS","atmosphere","ATMOSPHERE","INITIAL_X_OFFSET","INITIAL_Y_OFFSET","velocity_x","INITIAL_VELOCITY_X","velocity_y","INITIAL_VELOCITY_Y","angle","INITIAL_ANGLE","angular_velocity","INITIAL_ANGULAR_VELOCITY","fireNuke","nuke","Math","sin","cos","console","log","push","document","addEventListener","event","code","speed","draw","random","xSign","ySign","vxSign","vySign","asteroid","window","innerWidth","innerHeight","clearRect","font","fillStyle","fillText","round","i","opacity_for_layer","beginPath","arc","PI","fill","save","translate","rotate","moveTo","lineTo","closePath","restore","length","activated","drawBoom","isSpacecraftOutsideBounds","update","newVelocities","drag_x","drag_y","abs","fuse","splice","j","undefined","boom_radius","asteroid1","asteroid2","dx","dy","distance","sqrt","gravitationalConstant","force","force_x","force_y","new_velocity_x","new_velocity_y","asteroidVelocities","asteroid_drag_x","asteroid_drag_y","restartGame","removeEventListener","loop","requestAnimationFrame"],"sources":["/Users/thomasrye/Documents/github/Rondaze/rondaze/src/game/game.js"],"sourcesContent":["import { applyGravity, atmosphericDrag, areCirclesClose, areCirclesColliding } from \"./physics.js\";\nimport { PLANET, SPACECRAFT, NUKES, ATMOSPHERE_LAYERS, ATMOSPHERE_OPACITY } from './constants.js';\n\nimport { Nuke, Asteroid } from \"./models.js\"\n// Initialize canvas\n\nexport function startGame(canvas, ctx) {\n\n  let planet, spacecraft, score, gameOver, nukes, asteroids, arrowUpPressed;\n\n  function initializeGame() {\n    planet = {\n      x: canvas.width / 2,\n      y: canvas.height / 2,\n      radius: PLANET.RADIUS,\n      mass: PLANET.MASS,\n      atmosphere: PLANET.ATMOSPHERE,\n    };\n\n    spacecraft = {\n      x: planet.x + SPACECRAFT.INITIAL_X_OFFSET,\n      y: planet.y + SPACECRAFT.INITIAL_Y_OFFSET,\n      radius: SPACECRAFT.RADIUS,\n      velocity_x: SPACECRAFT.INITIAL_VELOCITY_X,\n      velocity_y: SPACECRAFT.INITIAL_VELOCITY_Y,\n      angle: SPACECRAFT.INITIAL_ANGLE,\n      angular_velocity: SPACECRAFT.INITIAL_ANGULAR_VELOCITY,\n    };\n\n    score = 0;\n    gameOver = false;\n    nukes = [];\n    asteroids = [];\n    arrowUpPressed = false;\n  }\n\n  initializeGame();\n\n  function fireNuke(spacecraft) {\n    const nuke = new Nuke(spacecraft.x, spacecraft.y, (Math.sin(spacecraft.angle) * 1.5) + spacecraft.velocity_x, (-Math.cos(spacecraft.angle) * 1.5) + spacecraft.velocity_y, spacecraft.angle, 0, planet);\n    console.log(nuke)\n    nukes.push(nuke);\n  }\n\n  // Add keyboard controls\n  document.addEventListener(\"keydown\", (event) => {\n    switch (event.code) {\n      case \"ArrowLeft\":\n        spacecraft.angular_velocity -= 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowRight\":\n        spacecraft.angular_velocity += 0.01; // Change angular velocity instead of angle\n        break;\n      case \"ArrowUp\":\n        console.log(\"arrow up\")\n        arrowUpPressed = true;\n        break;\n      case \"ArrowDown\":\n        spacecraft.speed -= 0.1;\n        break;\n      case \"Space\":\n        fireNuke(spacecraft);\n        break;\n      default:\n        break;\n    }\n  });\n\n  document.addEventListener(\"keyup\", (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n          arrowUpPressed = false;\n          break;\n        default:\n          break;\n      }\n    });\n\n  // Draw the planet and spacecraft\n  function draw() {\n    // Generate a meteor shower\n    if (Math.random() <= 0.005) {\n      let xSign = 1;\n      let ySign = 1;\n      let vxSign = 1;\n      let vySign = 1;\n      if (Math.random() <= 0.5) {\n        xSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        ySign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vxSign = -1;\n      }\n      if (Math.random() <= 0.5) {\n        vySign = -1;\n      }\n\n      const asteroid = new Asteroid(\n        xSign * (window.innerWidth + (5 * Math.random() + 0.4)), \n        ySign * (window.innerHeight + (5 * Math.random() + 0.4)), \n        vxSign * Math.random() * 0.005,\n        vySign * Math.random() * 0.0025,\n        planet,\n        (Math.random() * 15) + 2\n      );\n      \n      asteroids.push(asteroid);\n    }\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n      ctx.font = \"50px Arial\";\n      ctx.fillStyle = \"white\";\n      ctx.fillText(Math.round(score / 100),10,80);\n    \n      for (let i = 0; i < ATMOSPHERE_LAYERS; i++) {\n        let radius = planet.radius + planet.atmosphere * (i / ATMOSPHERE_LAYERS); // Gradually increase the radius\n        let opacity_for_layer = ATMOSPHERE_OPACITY * (1 - i / ATMOSPHERE_LAYERS); // Gradually decrease the opacity\n\n        ctx.beginPath();\n        ctx.arc(planet.x, planet.y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(135, 206, 235, ${opacity_for_layer})`; // Use the calculated opacity\n        ctx.fill();\n      }\n      \n      // Draw the planet\n      ctx.beginPath();\n      ctx.arc(planet.x, planet.y, planet.radius, 0, Math.PI * 2);\n      ctx.fillStyle = \"blue\";\n      ctx.fill();\n\n      if (arrowUpPressed) {\n          ctx.save(); \n          ctx.translate(spacecraft.x, spacecraft.y);\n          ctx.rotate(spacecraft.angle);\n          ctx.beginPath();\n          ctx.moveTo(-spacecraft.radius, spacecraft.radius + 10);\n          ctx.lineTo(0, spacecraft.radius + 30);\n          ctx.lineTo(spacecraft.radius, spacecraft.radius + 10);\n          ctx.closePath();\n          ctx.fillStyle = \"orange\";\n          ctx.fill();\n          ctx.restore();\n        }\n\n      // draw spacecraft\n      ctx.save(); // Save the current state of the canvas \n      ctx.translate(spacecraft.x, spacecraft.y); \n      // Move the origin to the center of the spacecraft \n      ctx.rotate(spacecraft.angle); \n      // Rotate the canvas by the angle \n      ctx.beginPath(); \n      ctx.moveTo(0, -spacecraft.radius); \n      // Move to the top vertex (relative to the origin) \n      ctx.lineTo(-spacecraft.radius, spacecraft.radius+10); \n      // Draw a line to the bottom left vertex \n      ctx.lineTo(spacecraft.radius, spacecraft.radius+10); \n      // Draw a line to the bottom right vertex \n      ctx.closePath(); \n      // Close the path \n      ctx.fillStyle = \"maroon\"; // Set fillStyle to maroon\n      // Set fillStyle to black \n      ctx.fill(); // Fill the triangle \n      ctx.restore(); // Restore the previous state of the canvas\n\n      // draw nukes\n      for ( let i = 0; i < nukes.length; i++) {\n        nukes[i].draw(ctx);\n        \n        if (nukes[i].activated) {\n          nukes[i].drawBoom(ctx);\n        }\n      }\n\n      // draw asteroids\n      for (let i = 0; i < asteroids.length; i++) {\n        asteroids[i].draw(ctx);\n      }\n  }\n    \n\n  // Spacecraft outside bounds detection function\n  function isSpacecraftOutsideBounds(spacecraft) {\n      return spacecraft.x < 0 || spacecraft.x > canvas.width || spacecraft.y < 0 || spacecraft.y > canvas.height;\n  }\n\n  // Update the spacecraft's position and momentum\n  function update() {\n    score += 1;\n    console.log(\"x: \", spacecraft.velocity_x, \" y: \", spacecraft.velocity_y)\n    if (arrowUpPressed) {\n      spacecraft.velocity_x += Math.sin(spacecraft.angle)*0.003;\n      spacecraft.velocity_y -= Math.cos(spacecraft.angle)*0.003;\n    }\n\n    spacecraft.x += spacecraft.velocity_x;\n    spacecraft.y += spacecraft.velocity_y;  \n    spacecraft.angle += spacecraft.angular_velocity;\n\n    // Damping\n    spacecraft.angular_velocity *= 0.995;\n\n    // Apply gravity to spacecraft\n    let newVelocities = applyGravity(planet, spacecraft.x, spacecraft.y, spacecraft.velocity_x, spacecraft.velocity_y);\n    spacecraft.velocity_x = newVelocities.velocity_x;\n    spacecraft.velocity_y = newVelocities.velocity_y;\n\n    // Apply atmospheric drag to spacecraft\n    const drag_x = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n    const drag_y = atmosphericDrag(spacecraft.x, spacecraft.y, planet);\n\n    spacecraft.velocity_x *= 1 - (drag_x * Math.abs(spacecraft.velocity_x));\n    spacecraft.velocity_y *= 1 - (drag_y * Math.abs(spacecraft.velocity_y));\n\n    // Check for spacecraft collision with planet\n    if (areCirclesColliding(planet, spacecraft) || isSpacecraftOutsideBounds(spacecraft)) {\n        spacecraft.x = planet.x;\n        spacecraft.y = planet.y + 200;\n        spacecraft.velocity_x = 1.3;\n        spacecraft.velocity_y = 0;\n\n        gameOver = true;\n    }\n\n    // Update nukes\n    for (let i = 0; i < nukes.length; i++) {\n        nukes[i].update();\n\n        if (nukes[i].fuse <= 0) {\n          nukes[i].activated = true;\n        }\n\n        if (areCirclesColliding(planet, nukes[i])) {\n            nukes.splice(i, 1);\n            i--;\n            continue;\n        }\n\n        for (let j = 0; j < asteroids.length; j++) {\n            let asteroid = asteroids[j];\n\n            if (areCirclesClose(nukes[i], asteroid, 30)) {\n                // Create an explosion\n                nukes[i].activated = true;\n                score += asteroid.radius * 10;\n                i--;\n                break;\n            }\n        }\n\n        // if the nuke is activated, remove asteroids within the blast radius\n        if (nukes[i] == undefined || nukes[i].activated == undefined) {\n          continue;\n        }\n        if (nukes[i].activated) {\n            for (let j = 0; j < asteroids.length; j++) {\n                let asteroid = asteroids[j];\n\n                if (areCirclesClose(nukes[i], asteroid, nukes[i].boom_radius)) {\n                    asteroids.splice(j, 1);\n                    j--;\n                }\n            }\n            if (nukes[i].boom_radius <= 0) {\n                nukes.splice(i, 1);\n                i--;\n            } else {\n              nukes[i].boom_radius--;\n            }\n        }\n      }\n\n    // Apply gravitational attraction between asteroids\n    for (let i = 0; i < asteroids.length; i++) {\n        let asteroid1 = asteroids[i];\n\n        for (let j = i + 1; j < asteroids.length; j++) {\n            let asteroid2 = asteroids[j];\n\n            let dx = asteroid2.x - asteroid1.x;\n            let dy = asteroid2.y - asteroid1.y;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n\n            // Gravitational force magnitude\n            const gravitationalConstant = 0.1; // Adjust this constant as needed\n            const force = (gravitationalConstant * asteroid1.mass * asteroid2.mass) / (distance * distance);\n\n            // Directional force components\n            const force_x = (force * dx) / distance;\n            const force_y = (force * dy) / distance;\n\n            // Update velocities due to gravitational attraction\n            asteroid1.velocity_x += force_x / asteroid1.mass;\n            asteroid1.velocity_y += force_y / asteroid1.mass;\n\n            asteroid2.velocity_x -= force_x / asteroid2.mass;\n            asteroid2.velocity_y -= force_y / asteroid2.mass;\n            // Combine if collision\n            if (distance < asteroid1.radius + asteroid2.radius) {\n              // Calculate new velocities\n              let new_velocity_x = (asteroid1.velocity_x * asteroid1.mass + asteroid2.velocity_x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n              let new_velocity_y = (asteroid1.velocity_y * asteroid1.mass + asteroid2.velocity_y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n\n              asteroid1.x = (asteroid1.x * asteroid1.mass + asteroid2.x * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n              asteroid1.y = (asteroid1.y * asteroid1.mass + asteroid2.y * asteroid2.mass) / (asteroid1.mass + asteroid2.mass);\n              asteroid1.velocity_x = new_velocity_x;\n              asteroid1.velocity_y = new_velocity_y;\n\n              asteroid1.mass += asteroid2.mass\n              asteroids.splice(j, 1);\n          }\n        }\n\n        asteroid1.update();\n\n        // Apply gravity from planet\n        let asteroidVelocities = applyGravity(planet, asteroid1.x, asteroid1.y, asteroid1.velocity_x, asteroid1.velocity_y);\n        asteroid1.velocity_x = asteroidVelocities.velocity_x;\n        asteroid1.velocity_y = asteroidVelocities.velocity_y;\n\n        // Apply drag to asteroid\n        const asteroid_drag_x = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n        const asteroid_drag_y = atmosphericDrag(asteroid1.x, asteroid1.y, planet);\n\n        asteroid1.velocity_x *= 1 - (asteroid_drag_x * Math.abs(asteroid1.velocity_x));\n        asteroid1.velocity_y *= 1 - (asteroid_drag_y * Math.abs(asteroid1.velocity_y));\n\n        // Check for asteroid collision with planet\n        if (areCirclesColliding(planet, asteroid1)) {\n            asteroids.splice(i, 1);\n            i--;\n            gameOver = true;\n        }\n    }\n  }\n    \n  function restartGame() {\n    canvas.removeEventListener('click', restartGame);\n    initializeGame();\n    loop();\n  }\n\n  // Game loop\n  function loop() {\n    if (!gameOver) {\n      draw();\n      update();\n      requestAnimationFrame(loop);\n    } else {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.font = \"80px Arial\";\n      ctx.fillStyle = \"red\";\n      ctx.fillText(\"Game Over\", canvas.width / 2 - 200, canvas.height / 2);\n      ctx.font = \"50px Arial\";\n      ctx.fillText(\"Click to Restart\", canvas.width / 2 - 150, canvas.height / 2 + 60);\n      \n      // Add event listener for click to restart\n      canvas.addEventListener('click', restartGame);\n    }\n  }\n\n  // Start the game loop\n  loop();\n}"],"mappings":"AAAA,SAASA,YAAY,EAAEC,eAAe,EAAEC,eAAe,EAAEC,mBAAmB,QAAQ,cAAc;AAClG,SAASC,MAAM,EAAEC,UAAU,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,gBAAgB;AAEjG,SAASC,IAAI,EAAEC,QAAQ,QAAQ,aAAa;AAC5C;;AAEA,OAAO,SAASC,SAASA,CAACC,MAAM,EAAEC,GAAG,EAAE;EAErC,IAAIC,MAAM,EAAEC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEC,cAAc;EAEzE,SAASC,cAAcA,CAAA,EAAG;IACxBP,MAAM,GAAG;MACPQ,CAAC,EAAEV,MAAM,CAACW,KAAK,GAAG,CAAC;MACnBC,CAAC,EAAEZ,MAAM,CAACa,MAAM,GAAG,CAAC;MACpBC,MAAM,EAAEtB,MAAM,CAACuB,MAAM;MACrBC,IAAI,EAAExB,MAAM,CAACyB,IAAI;MACjBC,UAAU,EAAE1B,MAAM,CAAC2B;IACrB,CAAC;IAEDhB,UAAU,GAAG;MACXO,CAAC,EAAER,MAAM,CAACQ,CAAC,GAAGjB,UAAU,CAAC2B,gBAAgB;MACzCR,CAAC,EAAEV,MAAM,CAACU,CAAC,GAAGnB,UAAU,CAAC4B,gBAAgB;MACzCP,MAAM,EAAErB,UAAU,CAACsB,MAAM;MACzBO,UAAU,EAAE7B,UAAU,CAAC8B,kBAAkB;MACzCC,UAAU,EAAE/B,UAAU,CAACgC,kBAAkB;MACzCC,KAAK,EAAEjC,UAAU,CAACkC,aAAa;MAC/BC,gBAAgB,EAAEnC,UAAU,CAACoC;IAC/B,CAAC;IAEDzB,KAAK,GAAG,CAAC;IACTC,QAAQ,GAAG,KAAK;IAChBC,KAAK,GAAG,EAAE;IACVC,SAAS,GAAG,EAAE;IACdC,cAAc,GAAG,KAAK;EACxB;EAEAC,cAAc,CAAC,CAAC;EAEhB,SAASqB,QAAQA,CAAC3B,UAAU,EAAE;IAC5B,MAAM4B,IAAI,GAAG,IAAIlC,IAAI,CAACM,UAAU,CAACO,CAAC,EAAEP,UAAU,CAACS,CAAC,EAAGoB,IAAI,CAACC,GAAG,CAAC9B,UAAU,CAACuB,KAAK,CAAC,GAAG,GAAG,GAAIvB,UAAU,CAACmB,UAAU,EAAG,CAACU,IAAI,CAACE,GAAG,CAAC/B,UAAU,CAACuB,KAAK,CAAC,GAAG,GAAG,GAAIvB,UAAU,CAACqB,UAAU,EAAErB,UAAU,CAACuB,KAAK,EAAE,CAAC,EAAExB,MAAM,CAAC;IACvMiC,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACjBzB,KAAK,CAAC+B,IAAI,CAACN,IAAI,CAAC;EAClB;;EAEA;EACAO,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;IAC9C,QAAQA,KAAK,CAACC,IAAI;MAChB,KAAK,WAAW;QACdtC,UAAU,CAACyB,gBAAgB,IAAI,IAAI,CAAC,CAAC;QACrC;MACF,KAAK,YAAY;QACfzB,UAAU,CAACyB,gBAAgB,IAAI,IAAI,CAAC,CAAC;QACrC;MACF,KAAK,SAAS;QACZO,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvB5B,cAAc,GAAG,IAAI;QACrB;MACF,KAAK,WAAW;QACdL,UAAU,CAACuC,KAAK,IAAI,GAAG;QACvB;MACF,KAAK,OAAO;QACVZ,QAAQ,CAAC3B,UAAU,CAAC;QACpB;MACF;QACE;IACJ;EACF,CAAC,CAAC;EAEFmC,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;IAC1C,QAAQA,KAAK,CAACC,IAAI;MAChB,KAAK,SAAS;QACZjC,cAAc,GAAG,KAAK;QACtB;MACF;QACE;IACJ;EACF,CAAC,CAAC;;EAEJ;EACA,SAASmC,IAAIA,CAAA,EAAG;IACd;IACA,IAAIX,IAAI,CAACY,MAAM,CAAC,CAAC,IAAI,KAAK,EAAE;MAC1B,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIhB,IAAI,CAACY,MAAM,CAAC,CAAC,IAAI,GAAG,EAAE;QACxBC,KAAK,GAAG,CAAC,CAAC;MACZ;MACA,IAAIb,IAAI,CAACY,MAAM,CAAC,CAAC,IAAI,GAAG,EAAE;QACxBE,KAAK,GAAG,CAAC,CAAC;MACZ;MACA,IAAId,IAAI,CAACY,MAAM,CAAC,CAAC,IAAI,GAAG,EAAE;QACxBG,MAAM,GAAG,CAAC,CAAC;MACb;MACA,IAAIf,IAAI,CAACY,MAAM,CAAC,CAAC,IAAI,GAAG,EAAE;QACxBI,MAAM,GAAG,CAAC,CAAC;MACb;MAEA,MAAMC,QAAQ,GAAG,IAAInD,QAAQ,CAC3B+C,KAAK,IAAIK,MAAM,CAACC,UAAU,IAAI,CAAC,GAAGnB,IAAI,CAACY,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EACvDE,KAAK,IAAII,MAAM,CAACE,WAAW,IAAI,CAAC,GAAGpB,IAAI,CAACY,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EACxDG,MAAM,GAAGf,IAAI,CAACY,MAAM,CAAC,CAAC,GAAG,KAAK,EAC9BI,MAAM,GAAGhB,IAAI,CAACY,MAAM,CAAC,CAAC,GAAG,MAAM,EAC/B1C,MAAM,EACL8B,IAAI,CAACY,MAAM,CAAC,CAAC,GAAG,EAAE,GAAI,CACzB,CAAC;MAEDrC,SAAS,CAAC8B,IAAI,CAACY,QAAQ,CAAC;IAC1B;;IAEE;IACAhD,GAAG,CAACoD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErD,MAAM,CAACW,KAAK,EAAEX,MAAM,CAACa,MAAM,CAAC;IAEhDZ,GAAG,CAACqD,IAAI,GAAG,YAAY;IACvBrD,GAAG,CAACsD,SAAS,GAAG,OAAO;IACvBtD,GAAG,CAACuD,QAAQ,CAACxB,IAAI,CAACyB,KAAK,CAACrD,KAAK,GAAG,GAAG,CAAC,EAAC,EAAE,EAAC,EAAE,CAAC;IAE3C,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/D,iBAAiB,EAAE+D,CAAC,EAAE,EAAE;MAC1C,IAAI5C,MAAM,GAAGZ,MAAM,CAACY,MAAM,GAAGZ,MAAM,CAACgB,UAAU,IAAIwC,CAAC,GAAG/D,iBAAiB,CAAC,CAAC,CAAC;MAC1E,IAAIgE,iBAAiB,GAAG/D,kBAAkB,IAAI,CAAC,GAAG8D,CAAC,GAAG/D,iBAAiB,CAAC,CAAC,CAAC;;MAE1EM,GAAG,CAAC2D,SAAS,CAAC,CAAC;MACf3D,GAAG,CAAC4D,GAAG,CAAC3D,MAAM,CAACQ,CAAC,EAAER,MAAM,CAACU,CAAC,EAAEE,MAAM,EAAE,CAAC,EAAEkB,IAAI,CAAC8B,EAAE,GAAG,CAAC,CAAC;MACnD7D,GAAG,CAACsD,SAAS,GAAG,uBAAuBI,iBAAiB,GAAG,CAAC,CAAC;MAC7D1D,GAAG,CAAC8D,IAAI,CAAC,CAAC;IACZ;;IAEA;IACA9D,GAAG,CAAC2D,SAAS,CAAC,CAAC;IACf3D,GAAG,CAAC4D,GAAG,CAAC3D,MAAM,CAACQ,CAAC,EAAER,MAAM,CAACU,CAAC,EAAEV,MAAM,CAACY,MAAM,EAAE,CAAC,EAAEkB,IAAI,CAAC8B,EAAE,GAAG,CAAC,CAAC;IAC1D7D,GAAG,CAACsD,SAAS,GAAG,MAAM;IACtBtD,GAAG,CAAC8D,IAAI,CAAC,CAAC;IAEV,IAAIvD,cAAc,EAAE;MAChBP,GAAG,CAAC+D,IAAI,CAAC,CAAC;MACV/D,GAAG,CAACgE,SAAS,CAAC9D,UAAU,CAACO,CAAC,EAAEP,UAAU,CAACS,CAAC,CAAC;MACzCX,GAAG,CAACiE,MAAM,CAAC/D,UAAU,CAACuB,KAAK,CAAC;MAC5BzB,GAAG,CAAC2D,SAAS,CAAC,CAAC;MACf3D,GAAG,CAACkE,MAAM,CAAC,CAAChE,UAAU,CAACW,MAAM,EAAEX,UAAU,CAACW,MAAM,GAAG,EAAE,CAAC;MACtDb,GAAG,CAACmE,MAAM,CAAC,CAAC,EAAEjE,UAAU,CAACW,MAAM,GAAG,EAAE,CAAC;MACrCb,GAAG,CAACmE,MAAM,CAACjE,UAAU,CAACW,MAAM,EAAEX,UAAU,CAACW,MAAM,GAAG,EAAE,CAAC;MACrDb,GAAG,CAACoE,SAAS,CAAC,CAAC;MACfpE,GAAG,CAACsD,SAAS,GAAG,QAAQ;MACxBtD,GAAG,CAAC8D,IAAI,CAAC,CAAC;MACV9D,GAAG,CAACqE,OAAO,CAAC,CAAC;IACf;;IAEF;IACArE,GAAG,CAAC+D,IAAI,CAAC,CAAC,CAAC,CAAC;IACZ/D,GAAG,CAACgE,SAAS,CAAC9D,UAAU,CAACO,CAAC,EAAEP,UAAU,CAACS,CAAC,CAAC;IACzC;IACAX,GAAG,CAACiE,MAAM,CAAC/D,UAAU,CAACuB,KAAK,CAAC;IAC5B;IACAzB,GAAG,CAAC2D,SAAS,CAAC,CAAC;IACf3D,GAAG,CAACkE,MAAM,CAAC,CAAC,EAAE,CAAChE,UAAU,CAACW,MAAM,CAAC;IACjC;IACAb,GAAG,CAACmE,MAAM,CAAC,CAACjE,UAAU,CAACW,MAAM,EAAEX,UAAU,CAACW,MAAM,GAAC,EAAE,CAAC;IACpD;IACAb,GAAG,CAACmE,MAAM,CAACjE,UAAU,CAACW,MAAM,EAAEX,UAAU,CAACW,MAAM,GAAC,EAAE,CAAC;IACnD;IACAb,GAAG,CAACoE,SAAS,CAAC,CAAC;IACf;IACApE,GAAG,CAACsD,SAAS,GAAG,QAAQ,CAAC,CAAC;IAC1B;IACAtD,GAAG,CAAC8D,IAAI,CAAC,CAAC,CAAC,CAAC;IACZ9D,GAAG,CAACqE,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEf;IACA,KAAM,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpD,KAAK,CAACiE,MAAM,EAAEb,CAAC,EAAE,EAAE;MACtCpD,KAAK,CAACoD,CAAC,CAAC,CAACf,IAAI,CAAC1C,GAAG,CAAC;MAElB,IAAIK,KAAK,CAACoD,CAAC,CAAC,CAACc,SAAS,EAAE;QACtBlE,KAAK,CAACoD,CAAC,CAAC,CAACe,QAAQ,CAACxE,GAAG,CAAC;MACxB;IACF;;IAEA;IACA,KAAK,IAAIyD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,SAAS,CAACgE,MAAM,EAAEb,CAAC,EAAE,EAAE;MACzCnD,SAAS,CAACmD,CAAC,CAAC,CAACf,IAAI,CAAC1C,GAAG,CAAC;IACxB;EACJ;;EAGA;EACA,SAASyE,yBAAyBA,CAACvE,UAAU,EAAE;IAC3C,OAAOA,UAAU,CAACO,CAAC,GAAG,CAAC,IAAIP,UAAU,CAACO,CAAC,GAAGV,MAAM,CAACW,KAAK,IAAIR,UAAU,CAACS,CAAC,GAAG,CAAC,IAAIT,UAAU,CAACS,CAAC,GAAGZ,MAAM,CAACa,MAAM;EAC9G;;EAEA;EACA,SAAS8D,MAAMA,CAAA,EAAG;IAChBvE,KAAK,IAAI,CAAC;IACV+B,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEjC,UAAU,CAACmB,UAAU,EAAE,MAAM,EAAEnB,UAAU,CAACqB,UAAU,CAAC;IACxE,IAAIhB,cAAc,EAAE;MAClBL,UAAU,CAACmB,UAAU,IAAIU,IAAI,CAACC,GAAG,CAAC9B,UAAU,CAACuB,KAAK,CAAC,GAAC,KAAK;MACzDvB,UAAU,CAACqB,UAAU,IAAIQ,IAAI,CAACE,GAAG,CAAC/B,UAAU,CAACuB,KAAK,CAAC,GAAC,KAAK;IAC3D;IAEAvB,UAAU,CAACO,CAAC,IAAIP,UAAU,CAACmB,UAAU;IACrCnB,UAAU,CAACS,CAAC,IAAIT,UAAU,CAACqB,UAAU;IACrCrB,UAAU,CAACuB,KAAK,IAAIvB,UAAU,CAACyB,gBAAgB;;IAE/C;IACAzB,UAAU,CAACyB,gBAAgB,IAAI,KAAK;;IAEpC;IACA,IAAIgD,aAAa,GAAGxF,YAAY,CAACc,MAAM,EAAEC,UAAU,CAACO,CAAC,EAAEP,UAAU,CAACS,CAAC,EAAET,UAAU,CAACmB,UAAU,EAAEnB,UAAU,CAACqB,UAAU,CAAC;IAClHrB,UAAU,CAACmB,UAAU,GAAGsD,aAAa,CAACtD,UAAU;IAChDnB,UAAU,CAACqB,UAAU,GAAGoD,aAAa,CAACpD,UAAU;;IAEhD;IACA,MAAMqD,MAAM,GAAGxF,eAAe,CAACc,UAAU,CAACO,CAAC,EAAEP,UAAU,CAACS,CAAC,EAAEV,MAAM,CAAC;IAClE,MAAM4E,MAAM,GAAGzF,eAAe,CAACc,UAAU,CAACO,CAAC,EAAEP,UAAU,CAACS,CAAC,EAAEV,MAAM,CAAC;IAElEC,UAAU,CAACmB,UAAU,IAAI,CAAC,GAAIuD,MAAM,GAAG7C,IAAI,CAAC+C,GAAG,CAAC5E,UAAU,CAACmB,UAAU,CAAE;IACvEnB,UAAU,CAACqB,UAAU,IAAI,CAAC,GAAIsD,MAAM,GAAG9C,IAAI,CAAC+C,GAAG,CAAC5E,UAAU,CAACqB,UAAU,CAAE;;IAEvE;IACA,IAAIjC,mBAAmB,CAACW,MAAM,EAAEC,UAAU,CAAC,IAAIuE,yBAAyB,CAACvE,UAAU,CAAC,EAAE;MAClFA,UAAU,CAACO,CAAC,GAAGR,MAAM,CAACQ,CAAC;MACvBP,UAAU,CAACS,CAAC,GAAGV,MAAM,CAACU,CAAC,GAAG,GAAG;MAC7BT,UAAU,CAACmB,UAAU,GAAG,GAAG;MAC3BnB,UAAU,CAACqB,UAAU,GAAG,CAAC;MAEzBnB,QAAQ,GAAG,IAAI;IACnB;;IAEA;IACA,KAAK,IAAIqD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpD,KAAK,CAACiE,MAAM,EAAEb,CAAC,EAAE,EAAE;MACnCpD,KAAK,CAACoD,CAAC,CAAC,CAACiB,MAAM,CAAC,CAAC;MAEjB,IAAIrE,KAAK,CAACoD,CAAC,CAAC,CAACsB,IAAI,IAAI,CAAC,EAAE;QACtB1E,KAAK,CAACoD,CAAC,CAAC,CAACc,SAAS,GAAG,IAAI;MAC3B;MAEA,IAAIjF,mBAAmB,CAACW,MAAM,EAAEI,KAAK,CAACoD,CAAC,CAAC,CAAC,EAAE;QACvCpD,KAAK,CAAC2E,MAAM,CAACvB,CAAC,EAAE,CAAC,CAAC;QAClBA,CAAC,EAAE;QACH;MACJ;MAEA,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3E,SAAS,CAACgE,MAAM,EAAEW,CAAC,EAAE,EAAE;QACvC,IAAIjC,QAAQ,GAAG1C,SAAS,CAAC2E,CAAC,CAAC;QAE3B,IAAI5F,eAAe,CAACgB,KAAK,CAACoD,CAAC,CAAC,EAAET,QAAQ,EAAE,EAAE,CAAC,EAAE;UACzC;UACA3C,KAAK,CAACoD,CAAC,CAAC,CAACc,SAAS,GAAG,IAAI;UACzBpE,KAAK,IAAI6C,QAAQ,CAACnC,MAAM,GAAG,EAAE;UAC7B4C,CAAC,EAAE;UACH;QACJ;MACJ;;MAEA;MACA,IAAIpD,KAAK,CAACoD,CAAC,CAAC,IAAIyB,SAAS,IAAI7E,KAAK,CAACoD,CAAC,CAAC,CAACc,SAAS,IAAIW,SAAS,EAAE;QAC5D;MACF;MACA,IAAI7E,KAAK,CAACoD,CAAC,CAAC,CAACc,SAAS,EAAE;QACpB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3E,SAAS,CAACgE,MAAM,EAAEW,CAAC,EAAE,EAAE;UACvC,IAAIjC,QAAQ,GAAG1C,SAAS,CAAC2E,CAAC,CAAC;UAE3B,IAAI5F,eAAe,CAACgB,KAAK,CAACoD,CAAC,CAAC,EAAET,QAAQ,EAAE3C,KAAK,CAACoD,CAAC,CAAC,CAAC0B,WAAW,CAAC,EAAE;YAC3D7E,SAAS,CAAC0E,MAAM,CAACC,CAAC,EAAE,CAAC,CAAC;YACtBA,CAAC,EAAE;UACP;QACJ;QACA,IAAI5E,KAAK,CAACoD,CAAC,CAAC,CAAC0B,WAAW,IAAI,CAAC,EAAE;UAC3B9E,KAAK,CAAC2E,MAAM,CAACvB,CAAC,EAAE,CAAC,CAAC;UAClBA,CAAC,EAAE;QACP,CAAC,MAAM;UACLpD,KAAK,CAACoD,CAAC,CAAC,CAAC0B,WAAW,EAAE;QACxB;MACJ;IACF;;IAEF;IACA,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnD,SAAS,CAACgE,MAAM,EAAEb,CAAC,EAAE,EAAE;MACvC,IAAI2B,SAAS,GAAG9E,SAAS,CAACmD,CAAC,CAAC;MAE5B,KAAK,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAC,EAAEwB,CAAC,GAAG3E,SAAS,CAACgE,MAAM,EAAEW,CAAC,EAAE,EAAE;QAC3C,IAAII,SAAS,GAAG/E,SAAS,CAAC2E,CAAC,CAAC;QAE5B,IAAIK,EAAE,GAAGD,SAAS,CAAC5E,CAAC,GAAG2E,SAAS,CAAC3E,CAAC;QAClC,IAAI8E,EAAE,GAAGF,SAAS,CAAC1E,CAAC,GAAGyE,SAAS,CAACzE,CAAC;QAClC,IAAI6E,QAAQ,GAAGzD,IAAI,CAAC0D,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;;QAE3C;QACA,MAAMG,qBAAqB,GAAG,GAAG,CAAC,CAAC;QACnC,MAAMC,KAAK,GAAID,qBAAqB,GAAGN,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAACtE,IAAI,IAAKyE,QAAQ,GAAGA,QAAQ,CAAC;;QAE/F;QACA,MAAMI,OAAO,GAAID,KAAK,GAAGL,EAAE,GAAIE,QAAQ;QACvC,MAAMK,OAAO,GAAIF,KAAK,GAAGJ,EAAE,GAAIC,QAAQ;;QAEvC;QACAJ,SAAS,CAAC/D,UAAU,IAAIuE,OAAO,GAAGR,SAAS,CAACrE,IAAI;QAChDqE,SAAS,CAAC7D,UAAU,IAAIsE,OAAO,GAAGT,SAAS,CAACrE,IAAI;QAEhDsE,SAAS,CAAChE,UAAU,IAAIuE,OAAO,GAAGP,SAAS,CAACtE,IAAI;QAChDsE,SAAS,CAAC9D,UAAU,IAAIsE,OAAO,GAAGR,SAAS,CAACtE,IAAI;QAChD;QACA,IAAIyE,QAAQ,GAAGJ,SAAS,CAACvE,MAAM,GAAGwE,SAAS,CAACxE,MAAM,EAAE;UAClD;UACA,IAAIiF,cAAc,GAAG,CAACV,SAAS,CAAC/D,UAAU,GAAG+D,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAAChE,UAAU,GAAGgE,SAAS,CAACtE,IAAI,KAAKqE,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAACtE,IAAI,CAAC;UACxI,IAAIgF,cAAc,GAAG,CAACX,SAAS,CAAC7D,UAAU,GAAG6D,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAAC9D,UAAU,GAAG8D,SAAS,CAACtE,IAAI,KAAKqE,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAACtE,IAAI,CAAC;UAExIqE,SAAS,CAAC3E,CAAC,GAAG,CAAC2E,SAAS,CAAC3E,CAAC,GAAG2E,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAAC5E,CAAC,GAAG4E,SAAS,CAACtE,IAAI,KAAKqE,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAACtE,IAAI,CAAC;UAC/GqE,SAAS,CAACzE,CAAC,GAAG,CAACyE,SAAS,CAACzE,CAAC,GAAGyE,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAAC1E,CAAC,GAAG0E,SAAS,CAACtE,IAAI,KAAKqE,SAAS,CAACrE,IAAI,GAAGsE,SAAS,CAACtE,IAAI,CAAC;UAC/GqE,SAAS,CAAC/D,UAAU,GAAGyE,cAAc;UACrCV,SAAS,CAAC7D,UAAU,GAAGwE,cAAc;UAErCX,SAAS,CAACrE,IAAI,IAAIsE,SAAS,CAACtE,IAAI;UAChCT,SAAS,CAAC0E,MAAM,CAACC,CAAC,EAAE,CAAC,CAAC;QAC1B;MACF;MAEAG,SAAS,CAACV,MAAM,CAAC,CAAC;;MAElB;MACA,IAAIsB,kBAAkB,GAAG7G,YAAY,CAACc,MAAM,EAAEmF,SAAS,CAAC3E,CAAC,EAAE2E,SAAS,CAACzE,CAAC,EAAEyE,SAAS,CAAC/D,UAAU,EAAE+D,SAAS,CAAC7D,UAAU,CAAC;MACnH6D,SAAS,CAAC/D,UAAU,GAAG2E,kBAAkB,CAAC3E,UAAU;MACpD+D,SAAS,CAAC7D,UAAU,GAAGyE,kBAAkB,CAACzE,UAAU;;MAEpD;MACA,MAAM0E,eAAe,GAAG7G,eAAe,CAACgG,SAAS,CAAC3E,CAAC,EAAE2E,SAAS,CAACzE,CAAC,EAAEV,MAAM,CAAC;MACzE,MAAMiG,eAAe,GAAG9G,eAAe,CAACgG,SAAS,CAAC3E,CAAC,EAAE2E,SAAS,CAACzE,CAAC,EAAEV,MAAM,CAAC;MAEzEmF,SAAS,CAAC/D,UAAU,IAAI,CAAC,GAAI4E,eAAe,GAAGlE,IAAI,CAAC+C,GAAG,CAACM,SAAS,CAAC/D,UAAU,CAAE;MAC9E+D,SAAS,CAAC7D,UAAU,IAAI,CAAC,GAAI2E,eAAe,GAAGnE,IAAI,CAAC+C,GAAG,CAACM,SAAS,CAAC7D,UAAU,CAAE;;MAE9E;MACA,IAAIjC,mBAAmB,CAACW,MAAM,EAAEmF,SAAS,CAAC,EAAE;QACxC9E,SAAS,CAAC0E,MAAM,CAACvB,CAAC,EAAE,CAAC,CAAC;QACtBA,CAAC,EAAE;QACHrD,QAAQ,GAAG,IAAI;MACnB;IACJ;EACF;EAEA,SAAS+F,WAAWA,CAAA,EAAG;IACrBpG,MAAM,CAACqG,mBAAmB,CAAC,OAAO,EAAED,WAAW,CAAC;IAChD3F,cAAc,CAAC,CAAC;IAChB6F,IAAI,CAAC,CAAC;EACR;;EAEA;EACA,SAASA,IAAIA,CAAA,EAAG;IACd,IAAI,CAACjG,QAAQ,EAAE;MACbsC,IAAI,CAAC,CAAC;MACNgC,MAAM,CAAC,CAAC;MACR4B,qBAAqB,CAACD,IAAI,CAAC;IAC7B,CAAC,MAAM;MACLrG,GAAG,CAACoD,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErD,MAAM,CAACW,KAAK,EAAEX,MAAM,CAACa,MAAM,CAAC;MAChDZ,GAAG,CAACqD,IAAI,GAAG,YAAY;MACvBrD,GAAG,CAACsD,SAAS,GAAG,KAAK;MACrBtD,GAAG,CAACuD,QAAQ,CAAC,WAAW,EAAExD,MAAM,CAACW,KAAK,GAAG,CAAC,GAAG,GAAG,EAAEX,MAAM,CAACa,MAAM,GAAG,CAAC,CAAC;MACpEZ,GAAG,CAACqD,IAAI,GAAG,YAAY;MACvBrD,GAAG,CAACuD,QAAQ,CAAC,kBAAkB,EAAExD,MAAM,CAACW,KAAK,GAAG,CAAC,GAAG,GAAG,EAAEX,MAAM,CAACa,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;;MAEhF;MACAb,MAAM,CAACuC,gBAAgB,CAAC,OAAO,EAAE6D,WAAW,CAAC;IAC/C;EACF;;EAEA;EACAE,IAAI,CAAC,CAAC;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}